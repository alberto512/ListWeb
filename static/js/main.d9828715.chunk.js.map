{"version":3,"sources":["components/NavBar/NavBar.jsx","useToken.js","components/NavBar/NavBarGroup.jsx","pages/Home.jsx","components/Auth/SignUp.jsx","components/Auth/Login.jsx","pages/FormAuthPage.jsx","components/SearchBar/SearchBar.jsx","components/ItemDeck/ItemDeck.jsx","pages/Anime/AnimePage.jsx","components/Anime/Forms/AnimeForm.jsx","pages/Manga/MangaPage.jsx","components/Manga/Forms/MangaForm.jsx","pages/Book/BookPage.jsx","components/Book/Forms/BookForm.jsx","pages/Movie/MoviePage.jsx","components/Movie/Forms/MovieForm.jsx","pages/Series/SeriesPage.jsx","components/Series/Forms/SeriesForm.jsx","pages/Videogame/VideogamePage.jsx","components/Videogame/Forms/VideogameForm.jsx","components/Anime/InfoComponent/AnimeInfoComponent.jsx","pages/Anime/AnimeInfo.jsx","components/Anime/Forms/AnimeFormEdit.jsx","pages/Anime/AnimeInfoEdit.jsx","components/Manga/InfoComponent/MangaInfoComponent.jsx","pages/Manga/MangaInfo.jsx","components/Manga/Forms/MangaFormEdit.jsx","pages/Manga/MangaInfoEdit.jsx","components/Book/InfoComponent/BookInfoComponent.jsx","pages/Book/BookInfo.jsx","components/Book/Forms/BookFormEdit.jsx","pages/Book/BookInfoEdit.jsx","components/Movie/InfoComponent/MovieInfoComponent.jsx","pages/Movie/MovieInfo.jsx","components/Movie/Forms/MovieFormEdit.jsx","pages/Movie/MovieInfoEdit.jsx","components/Series/InfoComponent/SeriesInfoComponent.jsx","pages/Series/SeriesInfo.jsx","components/Series/Forms/SeriesFormEdit.jsx","pages/Series/SeriesInfoEdit.jsx","components/Videogame/InfoComponent/VideogameInfoComponent.jsx","pages/Videogame/VideogameInfo.jsx","components/Videogame/Forms/VideogameFormEdit.jsx","pages/Videogame/VideogameInfoEdit.jsx","App.js","index.js"],"names":["NavBar","React","forwardRef","props","ref","useState","display","setDisplay","useImperativeHandle","openNavBar","open","closeNavBar","close","ReactDOM","createPortal","className","onClick","children","document","getElementById","useToken","tokenString","localStorage","getItem","userToken","JSON","parse","getToken","token","setToken","setItem","stringify","NavBarGroup","navBarRef","useRef","current","Fragment","size","icon","exact","activeClassName","to","removeItem","window","location","href","Home","body","style","backgroundColor","Component","auth","formData","a","axios","post","then","response","data","catch","error","console","log","Signup","validated","setValidated","username","setUserName","password","setPassword","FormData","handleSubmit","e","preventDefault","currentTarget","checkValidity","stopPropagation","append","Swal","fire","title","text","willClose","reload","Form","noValidate","onSubmit","Group","controlId","Label","Control","required","type","placeholder","onChange","target","value","Button","variant","Login","form","non_field_errors","Option","url","includes","SignUp","FormAuthPage","useEffect","Card","Header","Nav","fill","defaultActiveKey","Item","Link","Body","SearchBar","handleClick","autoComplete","id","this","Empty","counter","CheckCards","cont","c","Img","Title","Text","ItemDeck","state","myArray","get","headers","auxArray","arrayResponse","i","j","aux","push","sort","firstEl","secondEl","t1","t2","compareTo","arrayaux2","setState","prevProps","getDataCustom","$","hover","animate","marginTop","marginBottom","getData","map","index","CardDeck","auxstr","src","image","AnimePage","handleValue","val","AnimeForm","bsCustomFileInput","init","file","schema","Yup","oneOf","seasons","min","status","personalStatus","platform","optional","nextSeason","additionalComments","validationSchema","item","initialValues","handleChange","values","errors","Row","as","Col","name","isInvalid","Feedback","rows","File","event","files","customChange","label","accept","custom","MangaPage","MangaForm","chapters","saga","BookPage","BookForm","volume","nextBook","MoviePage","MovieForm","installment","nextMovie","SeriesPage","SeriesForm","VideogamePage","VideogameForm","franchise","nextVideogame","AnimeInfoComponent","anime","handleDelete","delete","params","path","Grid","container","spacing","xs","Paper","personal_status","next_season","additional_comments","AnimeInfo","match","AnimeFormEdit","enableReinitialize","put","AnimeInfoEdit","MangaInfoComponent","manga","MangaInfo","MangaFormEdit","MangaInfoEdit","BookInfoComponent","book","next_book","BookInfo","BookFormEdit","BookInfoEdit","MovieInfoComponent","movie","next_movie","MovieInfo","MovieFormEdit","MovieInfoEdit","SeriesInfoComponent","series","SeriesInfo","SeriesFormEdit","SeriesInfoEdit","VideogameInfoComponent","videogame","next_videogame","VideogameInfo","VideogameFormEdit","VideogameInfoEdit","App","component","render"],"mappings":"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","file":"static/js/main.d9828715.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst NavBar = React.forwardRef((props, ref) => {\r\n  const [display, setDisplay] = React.useState(false);\r\n\r\n  React.useImperativeHandle(ref, () => {\r\n    return {\r\n      openNavBar: () => open(),\r\n      closeNavBar: () => close(),\r\n    };\r\n  });\r\n\r\n  const open = () => {\r\n    setDisplay(true);\r\n  };\r\n\r\n  const close = () => {\r\n    setDisplay(false);\r\n  };\r\n\r\n  if (display) {\r\n    return ReactDOM.createPortal(\r\n      <div className={\"modal-wrapper\"}>\r\n        <div onClick={close} className={\"modal-backdrop\"} />\r\n        <div className={\"modal-box\"}>{props.children}</div>\r\n      </div>,\r\n      document.getElementById(\"root\")\r\n    );\r\n  }\r\n\r\n  return null;\r\n});\r\n\r\nexport default NavBar;","import { useState } from 'react';\r\n\r\nfunction useToken() {\r\n  const getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  };\r\n\r\n  const [token, setToken] = useState(getToken());\r\n\r\n  const saveToken = userToken => {\r\n    localStorage.setItem('token', JSON.stringify(userToken));\r\n    setToken(userToken.token);\r\n  };\r\n\r\n  return {\r\n    setToken: saveToken,\r\n    token\r\n  }\r\n}\r\n\r\nexport default useToken;","import React from \"react\";\r\nimport NavBar from \"./NavBar\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { MDBIcon } from \"mdbreact\";\r\nimport useToken from '../../useToken';\r\nimport \"./NavBar.css\";\r\n\r\nfunction NavBarGroup() {\r\n  const navBarRef = React.useRef();\r\n\r\n  const openNavBar = () => {\r\n    navBarRef.current.openNavBar();\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    window.location.href = \"https://alberto512.github.io/ListsWeb/\"\r\n  }\r\n\r\n  const { token } = useToken();\r\n\r\n  if(!token) {\r\n    return (\r\n      <React.Fragment>\r\n        <MDBIcon size=\"2x\" className=\"icon\" onClick={openNavBar} icon=\"bars\" />\r\n  \r\n        <NavBar ref={navBarRef}>\r\n          <div className=\"div-nav-bar\">\r\n            <div className=\"div-nav-elements\">\r\n              <ul>\r\n                <li>\r\n                  <NavLink exact activeClassName=\"current\" to=\"/ListsWeb/\">\r\n                    Home\r\n                  </NavLink>\r\n                </li>\r\n                <li>\r\n                  <NavLink exact activeClassName=\"current\" to=\"/ListsWeb/auth\">\r\n                    Authenticate\r\n                  </NavLink>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </NavBar>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <MDBIcon size=\"2x\" className=\"icon\" onClick={openNavBar} icon=\"bars\" />\r\n\r\n      <NavBar ref={navBarRef}>\r\n        <div className=\"div-nav-bar\">\r\n          <div className=\"div-nav-elements\">\r\n            <ul>\r\n              <li>\r\n                <NavLink exact activeClassName=\"current\" to=\"/ListsWeb/\">\r\n                  Home\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink exact activeClassName=\"current\" to=\"/ListsWeb/anime/\">\r\n                  Anime\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink exact activeClassName=\"current\" to=\"/ListsWeb/manga/\">\r\n                  Manga\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink exact activeClassName=\"current\" to=\"/ListsWeb/book/\">\r\n                  Book\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink exact activeClassName=\"current\" to=\"/ListsWeb/movie/\">\r\n                  Movie\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink exact activeClassName=\"current\" to=\"/ListsWeb/series/\">\r\n                  Series\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink exact activeClassName=\"current\" to=\"/ListsWeb/videogame/\">\r\n                  Videogame\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink exact activeClassName=\"current\" to=\"/ListsWeb/\" onClick={logout}>\r\n                  Logout\r\n                </NavLink>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </NavBar>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default NavBarGroup;\r\n","import React, { Component } from \"react\";\r\nimport NavBarGroup from \"../components/NavBar/NavBarGroup\";\r\nimport \"./Home.css\";\r\n\r\nclass Home extends Component {\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#D2A5FF\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n          <div className=\"title\">\r\n            <h1 className=\"lists-title\">Lists Web</h1>\r\n          </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Home;","import React, { useState } from \"react\";\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nasync function auth(formData) {\r\n    return await axios.post(\r\n        \"https://lists-backend-web.herokuapp.com/api/signup/\",\r\n        formData\r\n    ).then(response => {\r\n        return response.data;\r\n    }).catch((error) => {\r\n        console.log(error);\r\n    });\r\n}\r\n\r\nconst Signup = ({ setToken }) => {\r\n    const [validated, setValidated] = useState(false);\r\n    const [username, setUserName] = useState();\r\n    const [password, setPassword] = useState();\r\n    const formData = new FormData();\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n        const form = e.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            e.stopPropagation();\r\n            return\r\n        }\r\n\r\n        setValidated(true);\r\n\r\n        formData.append(\"username\", username);\r\n        formData.append(\"password\", password);\r\n\r\n        const data = await auth(formData);\r\n\r\n        if (data?.token){\r\n            window.location.href = \"https://alberto512.github.io/ListsWeb/\"\r\n\r\n            setToken(data.token);\r\n        } else if(data?.username[0] === \"A user with that username already exists.\") {\r\n            Swal.fire({\r\n                title: \"Oops...\",\r\n                text: \"A user with that username already exists\",\r\n                icon: \"error\",\r\n                willClose: () => {\r\n                  window.location.reload(false);\r\n                },\r\n              });\r\n        } else {\r\n            Swal.fire({\r\n                title: \"Oops...\",\r\n                text: \"Something went wrong\",\r\n                icon: \"error\",\r\n                willClose: () => {\r\n                  window.location.reload(false);\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n            <Form.Group controlId=\"formUsername\">\r\n                <Form.Label>Username</Form.Label>\r\n                <Form.Control required type=\"text\" placeholder=\"Enter username\" onChange={e => setUserName(e.target.value)}/>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control required type=\"password\" placeholder=\"Password\" onChange={e => setPassword(e.target.value)}/>\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n                Sign Up\r\n            </Button>\r\n            </Form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Signup;","import React, { useState } from \"react\";\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\nimport PropTypes from 'prop-types';\r\n\r\nasync function auth(formData) {\r\n    return await axios.post(\r\n        \"https://lists-backend-web.herokuapp.com/api/login/\",\r\n        formData\r\n    ).then(response => {\r\n        return response.data;\r\n    }).catch((error) => {\r\n        console.log(error);\r\n    });\r\n}\r\n\r\nconst Login = ({ setToken }) => {\r\n    const [validated, setValidated] = useState(false);\r\n    const [username, setUserName] = useState();\r\n    const [password, setPassword] = useState();\r\n    const formData = new FormData();\r\n\r\n    const handleSubmit = async e => {\r\n        const form = e.currentTarget;\r\n        e.preventDefault();\r\n        if (form.checkValidity() === false) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        setValidated(true);\r\n\r\n        formData.append(\"username\", username);\r\n        formData.append(\"password\", password);\r\n\r\n        const data = await auth(formData);\r\n\r\n        if (data?.token){\r\n            window.location.href = \"https://alberto512.github.io/ListsWeb/\"\r\n\r\n            setToken(data.token);\r\n        } else if(data?.non_field_errors[0] === \"Unable to log in with provided credentials.\") {\r\n            Swal.fire({\r\n                title: \"Oops...\",\r\n                text: \"You have introduced wrong username or password\",\r\n                icon: \"error\",\r\n                willClose: () => {\r\n                  window.location.reload(false);\r\n                },\r\n              });\r\n        } else {\r\n            Swal.fire({\r\n                title: \"Oops...\",\r\n                text: \"Something went wrong\",\r\n                icon: \"error\",\r\n                willClose: () => {\r\n                  window.location.reload(false);\r\n                },\r\n            });\r\n        }\r\n    };\r\n  return (\r\n    <React.Fragment>\r\n        <br/>\r\n        <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"formUsername\">\r\n            <Form.Label>Username</Form.Label>\r\n            <Form.Control required type=\"text\" placeholder=\"Enter username\" onChange={e => setUserName(e.target.value)}/>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicPassword\">\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control required type=\"password\" placeholder=\"Password\" onChange={e => setPassword(e.target.value)}/>\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n            Log in\r\n        </Button>\r\n        </Form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nLogin.propTypes = {\r\n    setToken: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Login;","import React, { useEffect } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport useToken from '../useToken';\r\nimport SignUp from '../components/Auth/SignUp';\r\nimport Login from '../components/Auth/Login';\r\nimport NavBarGroup from \"../components/NavBar/NavBarGroup\";\r\nimport \"./FormAuthPage.css\";\r\n\r\nfunction Option(props) {\r\n    const url = props.url;\r\n    if (url.includes(\"sign\")) {\r\n      return <SignUp setToken={props.setToken}/>;\r\n    }\r\n\r\n    return <Login setToken={props.setToken}/>;\r\n  }\r\n\r\nconst FormAuthPage = () => {\r\n  const { setToken } = useToken();\r\n\r\n  useEffect(() => {\r\n    document.body.style.backgroundColor = \"#D2A5FF\"\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <NavBarGroup />\r\n      <div className=\"container\">\r\n        <Card>\r\n            <Card.Header>\r\n                <Nav fill className=\"justify-content-center\" variant=\"tabs\" defaultActiveKey=\"#login\">\r\n                    <Nav.Item>\r\n                        <Nav.Link href=\"#login\">Log in</Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link href=\"#sign\">Sign up</Nav.Link>\r\n                    </Nav.Item>\r\n                </Nav>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Option url={window.location.href} setToken={setToken} />\r\n            </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default FormAuthPage;","import React, { Component } from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends Component {\r\n  handleClick = (e) => {\r\n    e.preventDefault();\r\n    this.props.value(document.getElementById(\"input-bar\").value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container-search\">\r\n          <form autoComplete=\"off\">\r\n            <div className=\"tb\">\r\n              <div className=\"td\">\r\n                <input\r\n                  id=\"input-bar\"\r\n                  className=\"input-bar\"\r\n                  type=\"text\"\r\n                  placeholder=\"Search\"\r\n                  required\r\n                />\r\n              </div>\r\n              <div className=\"td\" id=\"cover\">\r\n                <button\r\n                  className=\"button-bar\"\r\n                  type=\"submit\"\r\n                  onClick={this.handleClick}\r\n                >\r\n                  <div className=\"circle\"></div>\r\n                  <span className=\"button-span\"></span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { CardDeck } from \"react-bootstrap\";\r\nimport $ from \"jquery\";\r\nimport axios from \"axios\";\r\nimport \"./ItemDeck.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst getToken = () => {\r\n  const tokenString = localStorage.getItem('token');\r\n  const userToken = JSON.parse(tokenString);\r\n  if (userToken) {\r\n    return userToken\r\n  } else {\r\n    return undefined\r\n  }\r\n};\r\n\r\nfunction Empty(props) {\r\n  const cont = props.counter;\r\n  if (cont === 0) {\r\n    return (\r\n      <div>\r\n        <h1>No matching items</h1>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <p></p>;\r\n  }\r\n}\r\n\r\nfunction CheckCards(cont) {\r\n  let c = cont % 3;\r\n  if (c === 1) {\r\n    return (\r\n      <React.Fragment>\r\n        <Card className=\"item_card_hidden\">\r\n          <Card.Img variant=\"top\" />\r\n          <Card.Body>\r\n            <Card.Title></Card.Title>\r\n            <Card.Text></Card.Text>\r\n            <Button variant=\"primary\">View More</Button>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card className=\"item_card_hidden\">\r\n          <Card.Img variant=\"top\" />\r\n          <Card.Body>\r\n            <Card.Title></Card.Title>\r\n            <Card.Text></Card.Text>\r\n            <Button variant=\"primary\">View More</Button>\r\n          </Card.Body>\r\n        </Card>\r\n      </React.Fragment>\r\n    );\r\n  } else if (c === 2) {\r\n    return (\r\n      <Card className=\"item_card_hidden\">\r\n        <Card.Img variant=\"top\" />\r\n        <Card.Body>\r\n          <Card.Title></Card.Title>\r\n          <Card.Text></Card.Text>\r\n          <Button variant=\"primary\">View More</Button>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  } else {\r\n    return <p></p>;\r\n  }\r\n}\r\n\r\nclass ItemDeck extends Component {\r\n  state = {\r\n    myArray: [],\r\n  };\r\n\r\n  async getData(url) {\r\n\r\n    let arrayaux2 = await axios\r\n      .get(\"https://lists-backend-web.herokuapp.com/api/\"+ url + \"/\", {\r\n        headers: {\r\n          \"Authorization\": \"Token \" + getToken()\r\n        }\r\n      })\r\n      .then(function (response) {\r\n        let auxArray = [[]];\r\n        let arrayResponse = [];\r\n        let i = 0;\r\n        let j = 0;\r\n        for (let aux in response.data) {\r\n          arrayResponse.push(response.data[aux]);\r\n        }\r\n\r\n        console.log(arrayResponse)\r\n        arrayResponse.sort(function compareFn(firstEl, secondEl) {\r\n          console.log(firstEl.title)\r\n          console.log(secondEl.title)\r\n          let t1 = firstEl.title\r\n          console.log(t1)\r\n          console.log(typeof t1)\r\n          let t2 = secondEl.title\r\n          console.log(t2)\r\n          console.log(typeof t2)\r\n          return t1.compareTo(t2)\r\n        });\r\n        console.log(arrayResponse)\r\n\r\n        for (let aux in arrayResponse) {\r\n          if (j === 3) {\r\n            j = 0;\r\n            i++;\r\n            auxArray[i] = [];\r\n          }\r\n          auxArray[i].push(arrayResponse[aux]);\r\n          j++;\r\n        }\r\n        return auxArray;\r\n      });\r\n\r\n    this.setState({ myArray: arrayaux2 });\r\n  }\r\n\r\n  async getDataCustom(value, url) {\r\n    let arrayaux2 = await axios\r\n      .get(\"https://lists-backend-web.herokuapp.com/api/\" + url + \"/\", {\r\n        headers: {\r\n          \"Authorization\": \"Token \" + getToken()\r\n        }\r\n      })\r\n      .then(function (response) {\r\n        let auxArray = [[]];\r\n        let i = 0;\r\n        let j = 0;\r\n        for (let aux in response.data) {\r\n          if (j === 3) {\r\n            j = 0;\r\n            i++;\r\n            auxArray[i] = [];\r\n          }\r\n          if (response.data[aux].title.includes(value)) {\r\n            auxArray[i].push(response.data[aux]);\r\n            j++;\r\n          }\r\n        }\r\n        return auxArray;\r\n      });\r\n    this.setState({ myArray: arrayaux2 });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.value !== prevProps.value) {\r\n      this.getDataCustom(this.props.value, this.props.url);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    $(\".item_card\").hover(\r\n      function () {\r\n        $(this).animate(\r\n          {\r\n            marginTop: \"-=1%\",\r\n            marginBottom: \"1%\",\r\n          },\r\n          200\r\n        );\r\n      },\r\n\r\n      function () {\r\n        $(this).animate(\r\n          {\r\n            marginTop: \"0%\",\r\n            marginBottom: \"0%\",\r\n          },\r\n          200\r\n        );\r\n      }\r\n    );\r\n\r\n    this.getData(this.props.url);\r\n  }\r\n\r\n  render() {\r\n    let cont = 0;\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.myArray.map((value, index) => {\r\n          return (\r\n            <CardDeck className=\"deck\" key={index}>\r\n              {value.map((value, index) => {\r\n                cont++;\r\n                let auxstr = \"/ListsWeb/\" + this.props.url + \"/info/\" +  value.id;\r\n                return (\r\n                  <Card className=\"item_card\" key={index}>\r\n                    <Card.Img className=\"item-img\" variant=\"top\" src={value.image} />\r\n                    <Card.Body className=\"item-card-body\">\r\n                      <Card.Title>{value.title}</Card.Title>\r\n                      <NavLink exact activeClassName=\"current\" to={auxstr}>\r\n                        <Button variant=\"primary\">View More</Button>\r\n                      </NavLink>\r\n                    </Card.Body>\r\n                  </Card>\r\n                );\r\n              })}\r\n              {CheckCards(cont)}\r\n            </CardDeck>\r\n          );\r\n        })}\r\n\r\n        <div className=\"wrap\">\r\n          <Empty counter={cont} />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ItemDeck;\r\n","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Button from '@material-ui/core/Button';\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\nimport SearchBar from \"../../components/SearchBar/SearchBar\";\r\nimport ItemDeck from \"../../components/ItemDeck/ItemDeck\";\r\nimport \"./AnimePage.css\";\r\n\r\nclass AnimePage extends Component {\r\n  state = {\r\n    value: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#1A43A9\";\r\n  }\r\n\r\n  handleValue = (val) => {\r\n    this.setState({ value: val });\r\n  };\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n          <NavBarGroup />\r\n          <div className=\"search-anime\">\r\n            <SearchBar value={this.handleValue} />\r\n          </div>\r\n          <div className=\"item-deck-anime\">\r\n            <ItemDeck value={this.state.value} url=\"anime\"/>\r\n          </div>\r\n          <Button className=\"button-anime\">\r\n            <NavLink exact className=\"button-anime-link\" to=\"/ListsWeb/anime/add\">\r\n              Add\r\n            </NavLink>\r\n          </Button>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default AnimePage;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport NavBarGroup from \"../../NavBar/NavBarGroup\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./AnimeForm.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n  };\r\n\r\nclass AnimeForm extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#1A43A9\";\r\n    (function () {\r\n      bsCustomFileInput.init();\r\n    })();\r\n  }\r\n\r\n  render() {\r\n    const formData = new FormData();\r\n    let file;\r\n\r\n    const schema = Yup.object({\r\n        title: Yup.string().required(\"Write a title for the anime\"),\r\n        type: Yup.string().oneOf(\r\n            [\"Series\", \"Movie\", \"Special\", \"ONA\", \"OVA\"],\r\n            \"Select one type\"\r\n        )\r\n        .required(\"Select one type\"),\r\n        seasons: Yup.number().min(0).required(),\r\n        status: Yup.string().oneOf(\r\n            [\"Airing\", \"Finished\", \"Pending\", \"Cancelled\"],\r\n            \"Select the status\"\r\n        )\r\n        .required(\"Status of the anime\"),\r\n        personalStatus: Yup.string().oneOf(\r\n            [\"Watching\", \"Completed\", \"Plan to Watch\", \"Re-watching\", \"On Hold\", \"Dropped\"],\r\n            \"Select the personal status\"\r\n        )\r\n        .required(\"Personal status of the anime\"),\r\n        platform: Yup.string().optional(\"Platform where you can find the anime\"),\r\n        nextSeason: Yup.string().optional(\"Next season of the anime\"),\r\n        additionalComments: Yup.string().optional(\"Write some additional comments\"),\r\n        image: Yup.string().optional(),\r\n    });\r\n\r\n    const customChange = (event) => {\r\n      file = event.target.files[0];\r\n    };\r\n\r\n    const handleSubmit = (item) => {\r\n      formData.append(\"title\", item.title);\r\n      formData.append(\"type\", item.type);\r\n      formData.append(\"seasons\", item.seasons);\r\n      formData.append(\"status\", item.status);\r\n      formData.append(\"personal_status\", item.personalStatus);\r\n      formData.append(\"platform\", item.platform);\r\n      formData.append(\"next_season\", item.nextSeason);\r\n      formData.append(\"additional_comments\", item.additionalComments);\r\n      if (file) {\r\n        formData.append(\"image\", file, item.image);\r\n      }\r\n\r\n      axios\r\n        .post(\r\n          \"https://lists-backend-web.herokuapp.com/api/anime/\",formData, {\r\n              headers: {\r\n                \"Authorization\": \"Token \" + getToken()\r\n              }\r\n            }\r\n        )\r\n        .then(() => {\r\n          Swal.fire({\r\n            title: \"Good job!\",\r\n            text: \"Your anime has been submited\",\r\n            icon: \"success\",\r\n            willClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          Swal.fire({\r\n            title: \"Oops...\",\r\n            text: \"Something went wrong\",\r\n            icon: \"error\",\r\n            willClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        });\r\n    };\r\n\r\n    return (\r\n    <React.Fragment>\r\n      <NavBarGroup />\r\n      <Card className=\"custom-card\">\r\n        <Card.Header className=\"card-header-anime\">Create new anime</Card.Header>\r\n        <Card.Body className=\"card-body-anime\">\r\n          <Formik\r\n            validationSchema={schema}\r\n            onSubmit={handleSubmit}\r\n            initialValues={{ title: \"\", type: \"\", seasons: 0, status: \"\", personalStatus: \"\", platform: \"\", nextSeason: \"\", additionalComments: \"\", image: \"\" }}\r\n          >\r\n            {({ handleSubmit, handleChange, values, errors }) => (\r\n              <Form noValidate onSubmit={handleSubmit}>\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-title\">\r\n                    <Form.Label className=\"label\">Title</Form.Label>\r\n                    <Form.Control\r\n                      name=\"title\"\r\n                      value={values.title}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.title}\r\n                      placeholder=\"Anime's title\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.title}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-type\">\r\n                    <Form.Label className=\"label\">Type</Form.Label>\r\n                    <Form.Control\r\n                      name=\"type\"\r\n                      value={values.type}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.type}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select type</option>\r\n                      <option>Series</option>\r\n                      <option>Movie</option>\r\n                      <option>Special</option>\r\n                      <option>ONA</option>\r\n                      <option>OVA</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.type}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-seasons\">\r\n                    <Form.Label className=\"label\">Seasons</Form.Label>\r\n                    <Form.Control\r\n                      name=\"seasons\"\r\n                      value={values.seasons}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.seasons}\r\n                      type=\"number\"\r\n                      placeholder=\"0\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.seasons}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-status\">\r\n                    <Form.Label className=\"label\">Status</Form.Label>\r\n                    <Form.Control\r\n                      name=\"status\"\r\n                      value={values.status}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.status}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select status</option>\r\n                      <option>Airing</option>\r\n                      <option>Finished</option>\r\n                      <option>Pending</option>\r\n                      <option>Cancelled</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.status}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-personalStatus\">\r\n                    <Form.Label className=\"label\">Personal status</Form.Label>\r\n                    <Form.Control\r\n                      name=\"personalStatus\"\r\n                      value={values.personalStatus}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.personalStatus}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select personal status</option>\r\n                      <option>Watching</option>\r\n                      <option>Completed</option>\r\n                      <option>Plan to Watch</option>\r\n                      <option>Re-watching</option>\r\n                      <option>On Hold</option>\r\n                      <option>Dropped</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.personalStatus}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-platform\">\r\n                    <Form.Label className=\"label\">Platform</Form.Label>\r\n                    <Form.Control\r\n                      name=\"platform\"\r\n                      value={values.platform}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.platform}\r\n                      placeholder=\"Platform\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.platform}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Group as={Col} controlId=\"form-grid-nextSeason\">\r\n                    <Form.Label className=\"label\">Next season</Form.Label>\r\n                    <Form.Control\r\n                      name=\"nextSeason\"\r\n                      value={values.nextSeason}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.nextSeason}\r\n                      placeholder=\"Next season\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.nextSeason}\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"form-grid-additionalComments\">\r\n                  <Form.Label className=\"label\">Additional comments</Form.Label>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    rows=\"5\"\r\n                    name=\"additionalComments\"\r\n                    value={values.additionalComments}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.additionalComments}\r\n                    placeholder=\"Write any additional comments\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.additionalComments}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"form-grid-image\">\r\n                  <Form.File\r\n                    id=\"image\"\r\n                    name=\"image\"\r\n                    value={values.image}\r\n                    onChange={(event) => {\r\n                      handleChange(event);\r\n                      customChange(event);\r\n                    }}\r\n                    isInvalid={!!errors.image}\r\n                    label=\"Upload your cover image\"\r\n                    accept=\".jpg,.png\"\r\n                    custom\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Button\r\n                  variant=\"warning\"\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Card.Body>\r\n      </Card>\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnimeForm;","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Button from '@material-ui/core/Button';\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\nimport SearchBar from \"../../components/SearchBar/SearchBar\";\r\nimport ItemDeck from \"../../components/ItemDeck/ItemDeck\";\r\nimport \"./MangaPage.css\";\r\n\r\nclass MangaPage extends Component {\r\n  state = {\r\n    value: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#2BDDB9\";\r\n  }\r\n\r\n  handleValue = (val) => {\r\n    this.setState({ value: val });\r\n  };\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n          <NavBarGroup />\r\n          <div className=\"search-manga\">\r\n            <SearchBar value={this.handleValue} />\r\n          </div>\r\n          <div className=\"item-deck-manga\">\r\n            <ItemDeck value={this.state.value} url=\"manga\"/>\r\n          </div>\r\n          <Button className=\"button-manga\">\r\n            <NavLink exact className=\"button-manga-link\" to=\"/ListsWeb/manga/add\">\r\n              Add\r\n            </NavLink>\r\n          </Button>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MangaPage;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport NavBarGroup from \"../../NavBar/NavBarGroup\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./MangaForm.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n  };\r\n\r\nclass MangaForm extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#2BDDB9\";\r\n    (function () {\r\n      bsCustomFileInput.init();\r\n    })();\r\n  }\r\n\r\n  render() {\r\n    const formData = new FormData();\r\n    let file;\r\n\r\n    const schema = Yup.object({\r\n      title: Yup.string().required(\"Write a title for the manga\"),\r\n      type: Yup.string().oneOf(\r\n          [\"Parent story\", \"Side story\", \"Spin-off\", \"One shot\"],\r\n          \"Select one type\"\r\n      )\r\n      .required(\"Select one type\"),\r\n      chapters: Yup.number().min(0).required(),\r\n      status: Yup.string().oneOf(\r\n          [\"Publishing\", \"Finished\", \"Cancelled\"],\r\n          \"Select the status\"\r\n      )\r\n      .required(\"Status of the manga\"),\r\n      personalStatus: Yup.string().oneOf(\r\n          [\"Reading\", \"Completed\", \"Plan to Read\", \"Re-reading\", \"On Hold\", \"Dropped\"],\r\n          \"Select the personal status\"\r\n      )\r\n      .required(\"Personal status of the manga\"),\r\n      saga: Yup.string().optional(\"Saga of the manga\"),\r\n      additionalComments: Yup.string().optional(\"Write some additional comments\"),\r\n      image: Yup.string().optional(),\r\n  });\r\n\r\n    const customChange = (event) => {\r\n      file = event.target.files[0];\r\n    };\r\n\r\n    const handleSubmit = (item) => {\r\n      formData.append(\"title\", item.title);\r\n      formData.append(\"type\", item.type);\r\n      formData.append(\"chapters\", item.chapters);\r\n      formData.append(\"status\", item.status);\r\n      formData.append(\"personal_status\", item.personalStatus);\r\n      formData.append(\"saga\", item.saga);\r\n      formData.append(\"additional_comments\", item.additionalComments);\r\n      if (file) {\r\n        formData.append(\"image\", file, item.image);\r\n      }\r\n\r\n      axios\r\n        .post(\r\n          \"https://lists-backend-web.herokuapp.com/api/manga/\",formData, {\r\n              headers: {\r\n                \"Authorization\": \"Token \" + getToken()\r\n              }\r\n            }\r\n        )\r\n        .then(() => {\r\n          Swal.fire({\r\n            title: \"Good job!\",\r\n            text: \"Your manga has been submited\",\r\n            icon: \"success\",\r\n            willClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          Swal.fire({\r\n            title: \"Oops...\",\r\n            text: \"Something went wrong\",\r\n            icon: \"error\",\r\n            willClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        });\r\n    };\r\n\r\n    return (\r\n    <React.Fragment>\r\n      <NavBarGroup />\r\n      <Card className=\"custom-card\">\r\n        <Card.Header className=\"card-header-manga\">Create new manga</Card.Header>\r\n        <Card.Body className=\"card-body-manga\">\r\n          <Formik\r\n            validationSchema={schema}\r\n            onSubmit={handleSubmit}\r\n            initialValues={{ title: \"\", type: \"\", chapters: 0, status: \"\", personalStatus: \"\", saga: \"\", additionalComments: \"\", image: \"\" }}\r\n          >\r\n            {({ handleSubmit, handleChange, values, errors }) => (\r\n              <Form noValidate onSubmit={handleSubmit}>\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-title\">\r\n                    <Form.Label className=\"label\">Title</Form.Label>\r\n                    <Form.Control\r\n                      name=\"title\"\r\n                      value={values.title}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.title}\r\n                      placeholder=\"Manga's title\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.title}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-type\">\r\n                    <Form.Label className=\"label\">Type</Form.Label>\r\n                    <Form.Control\r\n                      name=\"type\"\r\n                      value={values.type}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.type}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select type</option>\r\n                      <option>Parent story</option>\r\n                      <option>Side story</option>\r\n                      <option>Spin-off</option>\r\n                      <option>One shot</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.type}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-chapters\">\r\n                    <Form.Label className=\"label\">Chapters</Form.Label>\r\n                    <Form.Control\r\n                      name=\"chapters\"\r\n                      value={values.chapters}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.chapters}\r\n                      type=\"number\"\r\n                      placeholder=\"0\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.chapters}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-status\">\r\n                    <Form.Label className=\"label\">Status</Form.Label>\r\n                    <Form.Control\r\n                      name=\"status\"\r\n                      value={values.status}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.status}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select status</option>\r\n                      <option>Publishing</option>\r\n                      <option>Finished</option>\r\n                      <option>Cancelled</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.status}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-personalStatus\">\r\n                    <Form.Label className=\"label\">Personal status</Form.Label>\r\n                    <Form.Control\r\n                      name=\"personalStatus\"\r\n                      value={values.personalStatus}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.personalStatus}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select personal status</option>\r\n                      <option>Reading</option>\r\n                      <option>Completed</option>\r\n                      <option>Plan to Read</option>\r\n                      <option>Re-reading</option>\r\n                      <option>On Hold</option>\r\n                      <option>Dropped</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.personalStatus}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-saga\">\r\n                    <Form.Label className=\"label\">Saga</Form.Label>\r\n                    <Form.Control\r\n                      name=\"saga\"\r\n                      value={values.saga}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.saga}\r\n                      placeholder=\"Saga\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.platform}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Group controlId=\"form-grid-additionalComments\">\r\n                  <Form.Label className=\"label\">Additional comments</Form.Label>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    rows=\"5\"\r\n                    name=\"additionalComments\"\r\n                    value={values.additionalComments}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.additionalComments}\r\n                    placeholder=\"Write any additional comments\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.additionalComments}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"form-grid-image\">\r\n                  <Form.File\r\n                    id=\"image\"\r\n                    name=\"image\"\r\n                    value={values.image}\r\n                    onChange={(event) => {\r\n                      handleChange(event);\r\n                      customChange(event);\r\n                    }}\r\n                    isInvalid={!!errors.image}\r\n                    label=\"Upload your cover image\"\r\n                    accept=\".jpg,.png\"\r\n                    custom\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Button\r\n                  variant=\"dark\"\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Card.Body>\r\n      </Card>\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MangaForm;","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Button from '@material-ui/core/Button';\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\nimport SearchBar from \"../../components/SearchBar/SearchBar\";\r\nimport ItemDeck from \"../../components/ItemDeck/ItemDeck\";\r\nimport \"./BookPage.css\";\r\n\r\nclass BookPage extends Component {\r\n  state = {\r\n    value: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#784500\";\r\n  }\r\n\r\n  handleValue = (val) => {\r\n    this.setState({ value: val });\r\n  };\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n          <NavBarGroup />\r\n          <div className=\"search-book\">\r\n            <SearchBar value={this.handleValue} />\r\n          </div>\r\n          <div className=\"item-deck-book\">\r\n            <ItemDeck value={this.state.value} url=\"book\"/>\r\n          </div>\r\n          <Button className=\"button-book\">\r\n            <NavLink exact className=\"button-book-link\" to=\"/ListsWeb/book/add\">\r\n              Add\r\n            </NavLink>\r\n          </Button>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default BookPage;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport NavBarGroup from \"../../NavBar/NavBarGroup\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./BookForm.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n  };\r\n\r\nclass BookForm extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#784500\";\r\n    (function () {\r\n      bsCustomFileInput.init();\r\n    })();\r\n  }\r\n\r\n  render() {\r\n    const formData = new FormData();\r\n    let file;\r\n\r\n    const schema = Yup.object({\r\n      title: Yup.string().required(\"Write a title for the book\"),\r\n      volume: Yup.number().min(0).required(),\r\n      status: Yup.string().oneOf(\r\n          [\"Publishing\", \"Finished\", \"Cancelled\"],\r\n          \"Select the status\"\r\n      )\r\n      .required(\"Status of the book\"),\r\n      personalStatus: Yup.string().oneOf(\r\n          [\"Reading\", \"Completed\", \"Plan to Read\", \"Re-reading\", \"On Hold\", \"Dropped\"],\r\n          \"Select the personal status\"\r\n      )\r\n      .required(\"Personal status of the book\"),\r\n      saga: Yup.string().optional(\"Saga of the book\"),\r\n      nextBook: Yup.string().optional(\"Next book of the saga\"),\r\n      additionalComments: Yup.string().optional(\"Write some additional comments\"),\r\n      image: Yup.string().optional(),\r\n  });\r\n\r\n    const customChange = (event) => {\r\n      file = event.target.files[0];\r\n    };\r\n\r\n    const handleSubmit = (item) => {\r\n      formData.append(\"title\", item.title);\r\n      formData.append(\"volume\", item.volume);\r\n      formData.append(\"status\", item.status);\r\n      formData.append(\"personal_status\", item.personalStatus);\r\n      formData.append(\"saga\", item.saga);\r\n      formData.append(\"next_book\", item.nextBook);\r\n      formData.append(\"additional_comments\", item.additionalComments);\r\n      if (file) {\r\n        formData.append(\"image\", file, item.image);\r\n      }\r\n\r\n      axios\r\n        .post(\r\n          \"https://lists-backend-web.herokuapp.com/api/book/\",formData, {\r\n              headers: {\r\n                \"Authorization\": \"Token \" + getToken()\r\n              }\r\n            }\r\n        )\r\n        .then(() => {\r\n          Swal.fire({\r\n            title: \"Good job!\",\r\n            text: \"Your book has been submited\",\r\n            icon: \"success\",\r\n            willClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          Swal.fire({\r\n            title: \"Oops...\",\r\n            text: \"Something went wrong\",\r\n            icon: \"error\",\r\n            willClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        });\r\n    };\r\n\r\n    return (\r\n    <React.Fragment>\r\n      <NavBarGroup />\r\n      <Card className=\"custom-card\">\r\n        <Card.Header className=\"card-header-book\">Create new book</Card.Header>\r\n        <Card.Body className=\"card-body-book\">\r\n          <Formik\r\n            validationSchema={schema}\r\n            onSubmit={handleSubmit}\r\n            initialValues={{ title: \"\", volume: 0, status: \"\", personalStatus: \"\", saga: \"\", nextBook: \"\", additionalComments: \"\", image: \"\" }}\r\n          >\r\n            {({ handleSubmit, handleChange, values, errors }) => (\r\n              <Form noValidate onSubmit={handleSubmit}>\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-title\">\r\n                    <Form.Label className=\"label\">Title</Form.Label>\r\n                    <Form.Control\r\n                      name=\"title\"\r\n                      value={values.title}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.title}\r\n                      placeholder=\"Book's title\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.title}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-volume\">\r\n                    <Form.Label className=\"label\">Volume</Form.Label>\r\n                    <Form.Control\r\n                      name=\"volume\"\r\n                      value={values.volume}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.volume}\r\n                      type=\"number\"\r\n                      placeholder=\"0\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.volume}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-status\">\r\n                    <Form.Label className=\"label\">Status</Form.Label>\r\n                    <Form.Control\r\n                      name=\"status\"\r\n                      value={values.status}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.status}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select status</option>\r\n                      <option>Publishing</option>\r\n                      <option>Finished</option>\r\n                      <option>Cancelled</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.status}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-personalStatus\">\r\n                    <Form.Label className=\"label\">Personal status</Form.Label>\r\n                    <Form.Control\r\n                      name=\"personalStatus\"\r\n                      value={values.personalStatus}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.personalStatus}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select personal status</option>\r\n                      <option>Reading</option>\r\n                      <option>Completed</option>\r\n                      <option>Plan to Read</option>\r\n                      <option>Re-reading</option>\r\n                      <option>On Hold</option>\r\n                      <option>Dropped</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.personalStatus}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-saga\">\r\n                    <Form.Label className=\"label\">Saga</Form.Label>\r\n                    <Form.Control\r\n                      name=\"saga\"\r\n                      value={values.saga}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.saga}\r\n                      placeholder=\"Saga\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.saga}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Group controlId=\"form-grid-nextBook\">\r\n                  <Form.Label className=\"label\">Next book</Form.Label>\r\n                  <Form.Control\r\n                    name=\"nextBook\"\r\n                    value={values.nextBook}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.nextBook}\r\n                    placeholder=\"Next book\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.nextBook}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"form-grid-additionalComments\">\r\n                  <Form.Label className=\"label\">Additional comments</Form.Label>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    rows=\"5\"\r\n                    name=\"additionalComments\"\r\n                    value={values.additionalComments}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.additionalComments}\r\n                    placeholder=\"Write any additional comments\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.additionalComments}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"form-grid-image\">\r\n                  <Form.File\r\n                    id=\"image\"\r\n                    name=\"image\"\r\n                    value={values.image}\r\n                    onChange={(event) => {\r\n                      handleChange(event);\r\n                      customChange(event);\r\n                    }}\r\n                    isInvalid={!!errors.image}\r\n                    label=\"Upload your cover image\"\r\n                    accept=\".jpg,.png\"\r\n                    custom\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Card.Body>\r\n      </Card>\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BookForm;","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Button from '@material-ui/core/Button';\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\nimport SearchBar from \"../../components/SearchBar/SearchBar\";\r\nimport ItemDeck from \"../../components/ItemDeck/ItemDeck\";\r\nimport \"./MoviePage.css\";\r\n\r\nclass MoviePage extends Component {\r\n  state = {\r\n    value: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#008E18\";\r\n  }\r\n\r\n  handleValue = (val) => {\r\n    this.setState({ value: val });\r\n  };\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n          <NavBarGroup />\r\n          <div className=\"search-movie\">\r\n            <SearchBar value={this.handleValue} />\r\n          </div>\r\n          <div className=\"item-deck-movie\">\r\n            <ItemDeck value={this.state.value} url=\"movie\"/>\r\n          </div>\r\n          <Button className=\"button-movie\">\r\n            <NavLink exact className=\"button-movie-link\" to=\"/ListsWeb/movie/add\">\r\n              Add\r\n            </NavLink>\r\n          </Button>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MoviePage;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport NavBarGroup from \"../../NavBar/NavBarGroup\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./MovieForm.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n  };\r\n\r\nclass MovieForm extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#008E18\";\r\n    (function () {\r\n      bsCustomFileInput.init();\r\n    })();\r\n  }\r\n\r\n  render() {\r\n    const formData = new FormData();\r\n    let file;\r\n\r\n    const schema = Yup.object({\r\n      title: Yup.string().required(\"Write a title for the movie\"),\r\n      installment: Yup.number().min(0).required(),\r\n      status: Yup.string().oneOf(\r\n          [\"Realeasing\", \"Finished\", \"Cancelled\"],\r\n          \"Select the status\"\r\n      )\r\n      .required(\"Status of the movie\"),\r\n      personalStatus: Yup.string().oneOf(\r\n          [\"Watching\", \"Completed\", \"Plan to Watch\", \"Re-watching\", \"On Hold\", \"Dropped\"],\r\n          \"Select the personal status\"\r\n      )\r\n      .required(\"Personal status of the movie\"),\r\n      saga: Yup.string().optional(\"Saga of the movie\"),\r\n      nextMovie: Yup.string().optional(\"Next movie of the saga\"),\r\n      platform: Yup.string().optional(\"Platform where you can find the movie\"),\r\n      additionalComments: Yup.string().optional(\"Write some additional comments\"),\r\n      image: Yup.string().optional(),\r\n  });\r\n\r\n    const customChange = (event) => {\r\n      file = event.target.files[0];\r\n    };\r\n\r\n    const handleSubmit = (item) => {\r\n      formData.append(\"title\", item.title);\r\n      formData.append(\"installment\", item.installment);\r\n      formData.append(\"status\", item.status);\r\n      formData.append(\"personal_status\", item.personalStatus);\r\n      formData.append(\"saga\", item.saga);\r\n      formData.append(\"next_movie\", item.nextMovie);\r\n      formData.append(\"platform\", item.platform);\r\n      formData.append(\"additional_comments\", item.additionalComments);\r\n      if (file) {\r\n        formData.append(\"image\", file, item.image);\r\n      }\r\n\r\n      axios\r\n        .post(\r\n          \"https://lists-backend-web.herokuapp.com/api/movie/\",formData, {\r\n              headers: {\r\n                \"Authorization\": \"Token \" + getToken()\r\n              }\r\n            }\r\n        )\r\n        .then(() => {\r\n          Swal.fire({\r\n            title: \"Good job!\",\r\n            text: \"Your movie has been submited\",\r\n            icon: \"success\",\r\n            willClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          Swal.fire({\r\n            title: \"Oops...\",\r\n            text: \"Something went wrong\",\r\n            icon: \"error\",\r\n            willClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        });\r\n    };\r\n\r\n    return (\r\n    <React.Fragment>\r\n      <NavBarGroup />\r\n      <Card className=\"custom-card\">\r\n        <Card.Header className=\"card-header-movie\">Create new movie</Card.Header>\r\n        <Card.Body className=\"card-body-movie\">\r\n          <Formik\r\n            validationSchema={schema}\r\n            onSubmit={handleSubmit}\r\n            initialValues={{ title: \"\", installment: 0, status: \"\", personalStatus: \"\", saga: \"\", nextMovie: \"\", platform: \"\", additionalComments: \"\", image: \"\" }}\r\n          >\r\n            {({ handleSubmit, handleChange, values, errors }) => (\r\n              <Form noValidate onSubmit={handleSubmit}>\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-title\">\r\n                    <Form.Label className=\"label\">Title</Form.Label>\r\n                    <Form.Control\r\n                      name=\"title\"\r\n                      value={values.title}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.title}\r\n                      placeholder=\"Movie's title\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.title}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-installment\">\r\n                    <Form.Label className=\"label\">Installment</Form.Label>\r\n                    <Form.Control\r\n                      name=\"installment\"\r\n                      value={values.installment}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.installment}\r\n                      type=\"number\"\r\n                      placeholder=\"0\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.installment}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-status\">\r\n                    <Form.Label className=\"label\">Status</Form.Label>\r\n                    <Form.Control\r\n                      name=\"status\"\r\n                      value={values.status}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.status}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select status</option>\r\n                      <option>Realeasing</option>\r\n                      <option>Finished</option>\r\n                      <option>Cancelled</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.status}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-personalStatus\">\r\n                    <Form.Label className=\"label\">Personal status</Form.Label>\r\n                    <Form.Control\r\n                      name=\"personalStatus\"\r\n                      value={values.personalStatus}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.personalStatus}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select personal status</option>\r\n                      <option>Watching</option>\r\n                      <option>Completed</option>\r\n                      <option>Plan to Watch</option>\r\n                      <option>Re-watching</option>\r\n                      <option>On Hold</option>\r\n                      <option>Dropped</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.personalStatus}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-saga\">\r\n                    <Form.Label className=\"label\">Saga</Form.Label>\r\n                    <Form.Control\r\n                      name=\"saga\"\r\n                      value={values.saga}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.saga}\r\n                      placeholder=\"Saga\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.saga}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Group controlId=\"form-grid-nextMovie\">\r\n                  <Form.Label className=\"label\">Next movie</Form.Label>\r\n                  <Form.Control\r\n                    name=\"nextMovie\"\r\n                    value={values.nextMovie}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.nextMovie}\r\n                    placeholder=\"Next movie\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.nextMovie}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} controlId=\"form-grid-platform\">\r\n                  <Form.Label className=\"label\">Platform</Form.Label>\r\n                  <Form.Control\r\n                    name=\"platform\"\r\n                    value={values.platform}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.platform}\r\n                    placeholder=\"Platform\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.platform}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"form-grid-additionalComments\">\r\n                  <Form.Label className=\"label\">Additional comments</Form.Label>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    rows=\"5\"\r\n                    name=\"additionalComments\"\r\n                    value={values.additionalComments}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.additionalComments}\r\n                    placeholder=\"Write any additional comments\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.additionalComments}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"form-grid-image\">\r\n                  <Form.File\r\n                    id=\"image\"\r\n                    name=\"image\"\r\n                    value={values.image}\r\n                    onChange={(event) => {\r\n                      handleChange(event);\r\n                      customChange(event);\r\n                    }}\r\n                    isInvalid={!!errors.image}\r\n                    label=\"Upload your cover image\"\r\n                    accept=\".jpg,.png\"\r\n                    custom\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Button\r\n                  variant=\"light\"\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Card.Body>\r\n      </Card>\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieForm;","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Button from '@material-ui/core/Button';\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\nimport SearchBar from \"../../components/SearchBar/SearchBar\";\r\nimport ItemDeck from \"../../components/ItemDeck/ItemDeck\";\r\nimport \"./SeriesPage.css\";\r\n\r\nclass SeriesPage extends Component {\r\n  state = {\r\n    value: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#D90C0C\";\r\n  }\r\n\r\n  handleValue = (val) => {\r\n    this.setState({ value: val });\r\n  };\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n          <NavBarGroup />\r\n          <div className=\"search-series\">\r\n            <SearchBar value={this.handleValue} />\r\n          </div>\r\n          <div className=\"item-deck-series\">\r\n            <ItemDeck value={this.state.value} url=\"series\"/>\r\n          </div>\r\n          <Button className=\"button-series\">\r\n            <NavLink exact className=\"button-series-link\" to=\"/ListsWeb/series/add\">\r\n              Add\r\n            </NavLink>\r\n          </Button>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default SeriesPage;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport NavBarGroup from \"../../NavBar/NavBarGroup\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./SeriesForm.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n  };\r\n\r\nclass SeriesForm extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#D90C0C\";\r\n    (function () {\r\n      bsCustomFileInput.init();\r\n    })();\r\n  }\r\n\r\n  render() {\r\n    const formData = new FormData();\r\n    let file;\r\n\r\n    const schema = Yup.object({\r\n        title: Yup.string().required(\"Write a title for the series\"),\r\n        type: Yup.string().oneOf(\r\n            [\"Series\", \"Reality show\"],\r\n            \"Select one type\"\r\n        )\r\n        .required(\"Select one type\"),\r\n        seasons: Yup.number().min(0).required(),\r\n        status: Yup.string().oneOf(\r\n            [\"Airing\", \"Finished\", \"Pending\", \"Cancelled\"],\r\n            \"Select the status\"\r\n        )\r\n        .required(\"Status of the series\"),\r\n        personalStatus: Yup.string().oneOf(\r\n            [\"Watching\", \"Completed\", \"Plan to Watch\", \"Re-watching\", \"On Hold\", \"Dropped\"],\r\n            \"Select the personal status\"\r\n        )\r\n        .required(\"Personal status of the series\"),\r\n        platform: Yup.string().optional(\"Platform where you can find the series\"),\r\n        nextSeason: Yup.string().optional(\"Next season of the series\"),\r\n        additionalComments: Yup.string().optional(\"Write some additional comments\"),\r\n        image: Yup.string().optional(),\r\n    });\r\n\r\n    const customChange = (event) => {\r\n      file = event.target.files[0];\r\n    };\r\n\r\n    const handleSubmit = (item) => {\r\n      formData.append(\"title\", item.title);\r\n      formData.append(\"type\", item.type);\r\n      formData.append(\"seasons\", item.seasons);\r\n      formData.append(\"status\", item.status);\r\n      formData.append(\"personal_status\", item.personalStatus);\r\n      formData.append(\"platform\", item.platform);\r\n      formData.append(\"next_season\", item.nextSeason);\r\n      formData.append(\"additional_comments\", item.additionalComments);\r\n      if (file) {\r\n        formData.append(\"image\", file, item.image);\r\n      }\r\n\r\n      axios\r\n        .post(\r\n          \"https://lists-backend-web.herokuapp.com/api/series/\",formData, {\r\n              headers: {\r\n                \"Authorization\": \"Token \" + getToken()\r\n              }\r\n            }\r\n        )\r\n        .then(() => {\r\n          Swal.fire({\r\n            title: \"Good job!\",\r\n            text: \"Your series has been submited\",\r\n            icon: \"success\",\r\n            willClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          Swal.fire({\r\n            title: \"Oops...\",\r\n            text: \"Something went wrong\",\r\n            icon: \"error\",\r\n            willClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        });\r\n    };\r\n\r\n    return (\r\n    <React.Fragment>\r\n      <NavBarGroup />\r\n      <Card className=\"custom-card\">\r\n        <Card.Header className=\"card-header-series\">Create new series</Card.Header>\r\n        <Card.Body className=\"card-body-series\">\r\n          <Formik\r\n            validationSchema={schema}\r\n            onSubmit={handleSubmit}\r\n            initialValues={{ title: \"\", type: \"\", seasons: 0, status: \"\", personalStatus: \"\", platform: \"\", nextSeason: \"\", additionalComments: \"\", image: \"\" }}\r\n          >\r\n            {({ handleSubmit, handleChange, values, errors }) => (\r\n              <Form noValidate onSubmit={handleSubmit}>\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-title\">\r\n                    <Form.Label className=\"label\">Title</Form.Label>\r\n                    <Form.Control\r\n                      name=\"title\"\r\n                      value={values.title}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.title}\r\n                      placeholder=\"Series's title\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.title}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-type\">\r\n                    <Form.Label className=\"label\">Type</Form.Label>\r\n                    <Form.Control\r\n                      name=\"type\"\r\n                      value={values.type}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.type}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select type</option>\r\n                      <option>Series</option>\r\n                      <option>Reality show</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.type}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-seasons\">\r\n                    <Form.Label className=\"label\">Seasons</Form.Label>\r\n                    <Form.Control\r\n                      name=\"seasons\"\r\n                      value={values.seasons}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.seasons}\r\n                      type=\"number\"\r\n                      placeholder=\"0\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.seasons}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-status\">\r\n                    <Form.Label className=\"label\">Status</Form.Label>\r\n                    <Form.Control\r\n                      name=\"status\"\r\n                      value={values.status}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.status}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select status</option>\r\n                      <option>Airing</option>\r\n                      <option>Finished</option>\r\n                      <option>Pending</option>\r\n                      <option>Cancelled</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.status}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-personalStatus\">\r\n                    <Form.Label className=\"label\">Personal status</Form.Label>\r\n                    <Form.Control\r\n                      name=\"personalStatus\"\r\n                      value={values.personalStatus}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.personalStatus}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select personal status</option>\r\n                      <option>Watching</option>\r\n                      <option>Completed</option>\r\n                      <option>Plan to Watch</option>\r\n                      <option>Re-watching</option>\r\n                      <option>On Hold</option>\r\n                      <option>Dropped</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.personalStatus}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-platform\">\r\n                    <Form.Label className=\"label\">Platform</Form.Label>\r\n                    <Form.Control\r\n                      name=\"platform\"\r\n                      value={values.platform}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.platform}\r\n                      placeholder=\"Platform\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.platform}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Group as={Col} controlId=\"form-grid-nextSeason\">\r\n                    <Form.Label className=\"label\">Next season</Form.Label>\r\n                    <Form.Control\r\n                      name=\"nextSeason\"\r\n                      value={values.nextSeason}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.nextSeason}\r\n                      placeholder=\"Next season\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.nextSeason}\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"form-grid-additionalComments\">\r\n                  <Form.Label className=\"label\">Additional comments</Form.Label>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    rows=\"5\"\r\n                    name=\"additionalComments\"\r\n                    value={values.additionalComments}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.additionalComments}\r\n                    placeholder=\"Write any additional comments\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.additionalComments}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"form-grid-image\">\r\n                  <Form.File\r\n                    id=\"image\"\r\n                    name=\"image\"\r\n                    value={values.image}\r\n                    onChange={(event) => {\r\n                      handleChange(event);\r\n                      customChange(event);\r\n                    }}\r\n                    isInvalid={!!errors.image}\r\n                    label=\"Upload your cover image\"\r\n                    accept=\".jpg,.png\"\r\n                    custom\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Card.Body>\r\n      </Card>\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SeriesForm;","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Button from '@material-ui/core/Button';\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\nimport SearchBar from \"../../components/SearchBar/SearchBar\";\r\nimport ItemDeck from \"../../components/ItemDeck/ItemDeck\";\r\nimport \"./VideogamePage.css\";\r\n\r\nclass VideogamePage extends Component {\r\n  state = {\r\n    value: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#FFF97D\";\r\n  }\r\n\r\n  handleValue = (val) => {\r\n    this.setState({ value: val });\r\n  };\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n          <NavBarGroup />\r\n          <div className=\"search-videogame\">\r\n            <SearchBar value={this.handleValue} />\r\n          </div>\r\n          <div className=\"item-deck-videogame\">\r\n            <ItemDeck value={this.state.value} url=\"videogame\"/>\r\n          </div>\r\n          <Button className=\"button-videogame\">\r\n            <NavLink exact className=\"button-videogame-link\" to=\"/ListsWeb/videogame/add\">\r\n              Add\r\n            </NavLink>\r\n          </Button>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default VideogamePage;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport NavBarGroup from \"../../NavBar/NavBarGroup\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./VideogameForm.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n  };\r\n\r\nclass VideogameForm extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#FFF97D\";\r\n    (function () {\r\n      bsCustomFileInput.init();\r\n    })();\r\n  }\r\n\r\n  render() {\r\n    const formData = new FormData();\r\n    let file;\r\n\r\n    const schema = Yup.object({\r\n      title: Yup.string().required(\"Write a title for the videogame\"),\r\n      installment: Yup.number().min(0).required(),\r\n      status: Yup.string().oneOf(\r\n          [\"Publishing\", \"Finished\", \"Cancelled\"],\r\n          \"Select the status\"\r\n      )\r\n      .required(\"Status of the videogame\"),\r\n      personalStatus: Yup.string().oneOf(\r\n          [\"Playing\", \"Completed\", \"Plan to Play\", \"Re-playing\", \"On Hold\", \"Dropped\"],\r\n          \"Select the personal status\"\r\n      )\r\n      .required(\"Personal status of the videogame\"),\r\n      franchise: Yup.string().optional(\"Franchise of the videogame\"),\r\n      nextVideogame: Yup.string().optional(\"Next videogame of the saga\"),\r\n      platform: Yup.string().optional(\"Platform where you can find the videogame\"),\r\n      additionalComments: Yup.string().optional(\"Write some additional comments\"),\r\n      image: Yup.string().optional(),\r\n  });\r\n\r\n    const customChange = (event) => {\r\n      file = event.target.files[0];\r\n    };\r\n\r\n    const handleSubmit = (item) => {\r\n      formData.append(\"title\", item.title);\r\n      formData.append(\"installment\", item.installment);\r\n      formData.append(\"status\", item.status);\r\n      formData.append(\"personal_status\", item.personalStatus);\r\n      formData.append(\"franchise\", item.franchise);\r\n      formData.append(\"next_videogame\", item.nextVideogame);\r\n      formData.append(\"platform\", item.platform);\r\n      formData.append(\"additional_comments\", item.additionalComments);\r\n      if (file) {\r\n        formData.append(\"image\", file, item.image);\r\n      }\r\n\r\n      axios\r\n        .post(\r\n          \"https://lists-backend-web.herokuapp.com/api/videogame/\",formData, {\r\n              headers: {\r\n                \"Authorization\": \"Token \" + getToken()\r\n              }\r\n            }\r\n        )\r\n        .then(() => {\r\n          Swal.fire({\r\n            title: \"Good job!\",\r\n            text: \"Your videogame has been submited\",\r\n            icon: \"success\",\r\n            willClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          Swal.fire({\r\n            title: \"Oops...\",\r\n            text: \"Something went wrong\",\r\n            icon: \"error\",\r\n            willClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        });\r\n    };\r\n\r\n    return (\r\n    <React.Fragment>\r\n      <NavBarGroup />\r\n      <Card className=\"custom-card\">\r\n        <Card.Header className=\"card-header-videogame\">Create new videogame</Card.Header>\r\n        <Card.Body className=\"card-body-videogame\">\r\n          <Formik\r\n            validationSchema={schema}\r\n            onSubmit={handleSubmit}\r\n            initialValues={{ title: \"\", installment: 0, status: \"\", personalStatus: \"\", franchise: \"\", nextVideogame: \"\", platform: \"\", additionalComments: \"\", image: \"\" }}\r\n          >\r\n            {({ handleSubmit, handleChange, values, errors }) => (\r\n              <Form noValidate onSubmit={handleSubmit}>\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-title\">\r\n                    <Form.Label className=\"label\">Title</Form.Label>\r\n                    <Form.Control\r\n                      name=\"title\"\r\n                      value={values.title}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.title}\r\n                      placeholder=\"Videogame's title\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.title}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-installment\">\r\n                    <Form.Label className=\"label\">Installment</Form.Label>\r\n                    <Form.Control\r\n                      name=\"installment\"\r\n                      value={values.installment}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.installment}\r\n                      type=\"number\"\r\n                      placeholder=\"0\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.installment}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-status\">\r\n                    <Form.Label className=\"label\">Status</Form.Label>\r\n                    <Form.Control\r\n                      name=\"status\"\r\n                      value={values.status}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.status}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select status</option>\r\n                      <option>Publishing</option>\r\n                      <option>Finished</option>\r\n                      <option>Cancelled</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.status}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-personalStatus\">\r\n                    <Form.Label className=\"label\">Personal status</Form.Label>\r\n                    <Form.Control\r\n                      name=\"personalStatus\"\r\n                      value={values.personalStatus}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.personalStatus}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select personal status</option>\r\n                      <option>Playing</option>\r\n                      <option>Completed</option>\r\n                      <option>Plan to Play</option>\r\n                      <option>Re-playing</option>\r\n                      <option>On Hold</option>\r\n                      <option>Dropped</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.personalStatus}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-franchise\">\r\n                    <Form.Label className=\"label\">Franchise</Form.Label>\r\n                    <Form.Control\r\n                      name=\"franchise\"\r\n                      value={values.franchise}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.franchise}\r\n                      placeholder=\"Franchise\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.franchise}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Group controlId=\"form-grid-nextVideogame\">\r\n                  <Form.Label className=\"label\">Next videogame</Form.Label>\r\n                  <Form.Control\r\n                    name=\"nextVideogame\"\r\n                    value={values.nextVideogame}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.nextVideogame}\r\n                    placeholder=\"Next videogame\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.nextVideogame}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} controlId=\"form-grid-platform\">\r\n                  <Form.Label className=\"label\">Platform</Form.Label>\r\n                  <Form.Control\r\n                    name=\"platform\"\r\n                    value={values.platform}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.platform}\r\n                    placeholder=\"Platform\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.platform}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"form-grid-additionalComments\">\r\n                  <Form.Label className=\"label\">Additional comments</Form.Label>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    rows=\"5\"\r\n                    name=\"additionalComments\"\r\n                    value={values.additionalComments}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.additionalComments}\r\n                    placeholder=\"Write any additional comments\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.additionalComments}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"form-grid-image\">\r\n                  <Form.File\r\n                    id=\"image\"\r\n                    name=\"image\"\r\n                    value={values.image}\r\n                    onChange={(event) => {\r\n                      handleChange(event);\r\n                      customChange(event);\r\n                    }}\r\n                    isInvalid={!!errors.image}\r\n                    label=\"Upload your cover image\"\r\n                    accept=\".jpg,.png\"\r\n                    custom\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Card.Body>\r\n      </Card>\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VideogameForm;","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Button from 'react-bootstrap/Button'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport \"./AnimeInfoComponent.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n};\r\n\r\nclass AnimeInfoComponent extends Component {\r\n  state = {\r\n    anime: [],\r\n  };\r\n\r\n  async getData() {\r\n    let data = await axios\r\n      .get(\r\n        \"https://lists-backend-web.herokuapp.com/api/anime/\" +\r\n          this.props.anime.params.id, {\r\n            headers: {\r\n                \"Authorization\": \"Token \" + getToken()\r\n            }\r\n          }\r\n      )\r\n      .then(function (response) {\r\n        return response.data;\r\n      });\r\n\r\n    this.setState({ anime: data });\r\n  }\r\n\r\n  handleDelete = (e) => {\r\n    axios.delete(\"https://lists-backend-web.herokuapp.com/api/anime/\" + this.state.anime.id + \"/\", {\r\n        headers: {\r\n          \"Authorization\": \"Token \" + getToken()\r\n        }\r\n      }\r\n    ).then(\r\n      function () {\r\n        window.location.href = \"https://alberto512.github.io/ListsWeb/anime/\"\r\n      }\r\n    )\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#1A43A9\"\r\n    this.getData();\r\n  }\r\n\r\n  render() {\r\n    let path = \"/ListsWeb/anime/info/edit/\" +  this.state.anime.id;\r\n    return (\r\n      <React.Fragment>\r\n        <Grid container spacing={6}>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-anime-paper\">TITLE<br />{this.state.anime.title}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-anime-paper\">TYPE<br />{this.state.anime.type}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-anime-paper\">SEASONS<br />{this.state.anime.seasons}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-anime-paper\">STATUS<br />{this.state.anime.status}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-anime-paper\">PERSONAL STATUS<br />{this.state.anime.personal_status}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-anime-paper\">PLATFORM<br />{this.state.anime.platform}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-anime-paper\">NEXT SEASON<br />{this.state.anime.next_season}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-anime-paper\">ADDITIONAL COMMENTS<br />{this.state.anime.additional_comments}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <NavLink exact activeClassName=\"current\" to={path}>\r\n                <Button className=\"button-edit\">Edit</Button>\r\n              </NavLink>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Button className=\"button-delete\" onClick={this.handleDelete}>Delete</Button>\r\n            </Grid>\r\n      </Grid>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnimeInfoComponent;","import React, { Component } from \"react\";\r\nimport AnimeInfoComponent from \"../../components/Anime/InfoComponent/AnimeInfoComponent\";\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\n\r\nclass AnimeInfo extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <AnimeInfoComponent anime={this.props.match} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnimeInfo;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n  };\r\n\r\nclass AnimeFormEdit extends Component {\r\n    state = {\r\n        anime: {\r\n            title: \"\",\r\n            type: \"\",\r\n            seasons: 0,\r\n            status: \"\",\r\n            personal_status: \"\",\r\n            platform: \"\",\r\n            next_season: \"\",\r\n            additional_comments: \"\",\r\n            image: \"\"\r\n        },\r\n    };\r\n\r\n    async getData() {\r\n        let data = await axios\r\n          .get(\r\n            \"https://lists-backend-web.herokuapp.com/api/anime/\" +\r\n              this.props.anime.params.id, {\r\n                headers: {\r\n                    \"Authorization\": \"Token \" + getToken()\r\n                }\r\n              }\r\n          )\r\n          .then(function (response) {\r\n            return response.data;\r\n            });\r\n\r\n        if (!data.platform) {\r\n            data.platform = \"\"\r\n        }\r\n\r\n        if (!data.next_season) {\r\n            data.next_season = \"\"\r\n        }\r\n    \r\n        if (!data.additional_comments) {\r\n            data.additional_comments = \"\"\r\n        }\r\n        this.setState({ anime: data });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.body.style.backgroundColor = \"#1A43A9\";\r\n        (function () {\r\n        bsCustomFileInput.init();\r\n        })();\r\n        this.getData();\r\n    }\r\n\r\n    render() {\r\n        const formData = new FormData();\r\n        let file;\r\n\r\n        const schema = Yup.object({\r\n            title: Yup.string().optional(\"Write a title for the anime\"),\r\n            type: Yup.string().oneOf(\r\n                [\"Series\", \"Movie\", \"Special\", \"ONA\", \"OVA\"],\r\n                \"Select one type\"\r\n            )\r\n            .optional(\"Select one type\"),\r\n            seasons: Yup.number().min(0).optional(),\r\n            status: Yup.string().oneOf(\r\n                [\"Airing\", \"Finished\", \"Pending\", \"Cancelled\"],\r\n                \"Select the status\"\r\n            )\r\n            .optional(\"Status of the anime\"),\r\n            personalStatus: Yup.string().oneOf(\r\n                [\"Watching\", \"Completed\", \"Plan to Watch\", \"Re-watching\", \"On Hold\", \"Dropped\"],\r\n                \"Select the personal status\"\r\n            )\r\n            .optional(\"Personal status of the anime\"),\r\n            platform: Yup.string().optional(\"Platform where you can find the anime\"),\r\n            nextSeason: Yup.string().optional(\"Next season of the anime\"),\r\n            additionalComments: Yup.string().optional(\"Write some additional comments\"),\r\n            image: Yup.string().optional(),\r\n        });\r\n\r\n        const customChange = (event) => {\r\n            file = event.target.files[0];\r\n        };\r\n\r\n        const handleSubmit = (item) => {\r\n            if (item.title !== this.state.anime.title) {\r\n                formData.append(\"title\", item.title);\r\n            }\r\n            if (item.type !== this.state.anime.type) {\r\n                formData.append(\"type\", item.type);\r\n            }\r\n            if (item.seasons !== this.state.anime.seasons) {\r\n                formData.append(\"seasons\", item.seasons);\r\n            }\r\n            if (item.status !== this.state.anime.status) {\r\n                formData.append(\"status\", item.status);\r\n            }\r\n            if (item.personalStatus !== this.state.anime.personal_status) {\r\n                formData.append(\"personal_status\", item.personalStatus);\r\n            }\r\n            if (item.platform !== this.state.anime.platform) {\r\n                formData.append(\"platform\", item.platform);\r\n            }\r\n            if (item.nextSeason !== this.state.anime.next_season) {\r\n                formData.append(\"next_season\", item.nextSeason);\r\n            }\r\n            if (item.additionalComments !== this.state.anime.additional_comments) {\r\n                formData.append(\"additional_comments\", item.additionalComments);\r\n            }\r\n            if (file) {\r\n                formData.append(\"image\", file, item.image);\r\n            }\r\n\r\n            axios.put(\r\n                \"https://lists-backend-web.herokuapp.com/api/anime/\" + this.state.anime.id + \"/\", formData, {\r\n                    headers: {\r\n                        \"Authorization\": \"Token \" + getToken()\r\n                    }\r\n                })\r\n                .then(() => {\r\n                Swal.fire({\r\n                    title: \"Good job!\",\r\n                    text: \"Your anime has been submited\",\r\n                    icon: \"success\",\r\n                    willClose: () => {\r\n                    window.location.reload(false);\r\n                    },\r\n                });\r\n                })\r\n                .catch((error) => {\r\n                Swal.fire({\r\n                    title: \"Oops...\",\r\n                    text: \"Something went wrong\",\r\n                    icon: \"error\",\r\n                    willClose: () => {\r\n                    window.location.reload(false);\r\n                    },\r\n                });\r\n            });\r\n        };\r\n\r\n        return (\r\n        <React.Fragment>\r\n        <Card className=\"custom-card\">\r\n            <Card.Header className=\"card-header-anime\">Create new anime</Card.Header>\r\n            <Card.Body className=\"card-body-anime\">\r\n            <Formik\r\n                enableReinitialize\r\n                validationSchema={schema}\r\n                onSubmit={handleSubmit}\r\n                initialValues={{ \r\n                    title: this.state.anime.title,\r\n                    type: this.state.anime.type,\r\n                    seasons: this.state.anime.seasons,\r\n                    status: this.state.anime.status,\r\n                    personalStatus: this.state.anime.personal_status,\r\n                    platform: this.state.anime.platform,\r\n                    nextSeason: this.state.anime.next_season,\r\n                    additionalComments: this.state.anime.additional_comments,\r\n                    image: \"\"\r\n                }}\r\n            >\r\n                {({ handleSubmit, handleChange, values, errors }) => (\r\n                <Form noValidate onSubmit={handleSubmit}>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-title\">\r\n                            <Form.Label className=\"label\">Title</Form.Label>\r\n                            <Form.Control\r\n                                name=\"title\"\r\n                                value={values.title}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.title}\r\n                                placeholder=\"Anime's title\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.title}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-type\">\r\n                            <Form.Label className=\"label\">Type</Form.Label>\r\n                            <Form.Control\r\n                                name=\"type\"\r\n                                value={values.type}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.type}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select type</option>\r\n                                <option>Series</option>\r\n                                <option>Movie</option>\r\n                                <option>Special</option>\r\n                                <option>ONA</option>\r\n                                <option>OVA</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.type}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-seasons\">\r\n                            <Form.Label className=\"label\">Seasons</Form.Label>\r\n                            <Form.Control\r\n                                name=\"seasons\"\r\n                                value={values.seasons}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.seasons}\r\n                                type=\"number\"\r\n                                placeholder=\"0\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.seasons}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-status\">\r\n                            <Form.Label className=\"label\">Status</Form.Label>\r\n                            <Form.Control\r\n                                name=\"status\"\r\n                                value={values.status}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.status}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select status</option>\r\n                                <option>Airing</option>\r\n                                <option>Finished</option>\r\n                                <option>Pending</option>\r\n                                <option>Cancelled</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.status}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-personalStatus\">\r\n                            <Form.Label className=\"label\">Personal status</Form.Label>\r\n                            <Form.Control\r\n                                name=\"personalStatus\"\r\n                                value={values.personalStatus}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.personalStatus}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select personal status</option>\r\n                                <option>Watching</option>\r\n                                <option>Completed</option>\r\n                                <option>Plan to Watch</option>\r\n                                <option>Re-watching</option>\r\n                                <option>On Hold</option>\r\n                                <option>Dropped</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.personalStatus}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-platform\">\r\n                            <Form.Label className=\"label\">Platform</Form.Label>\r\n                            <Form.Control\r\n                                name=\"platform\"\r\n                                value={values.platform}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.platform}\r\n                                placeholder=\"Platform\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.platform}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Group as={Col} controlId=\"form-grid-nextSeason\">\r\n                        <Form.Label className=\"label\">Next season</Form.Label>\r\n                        <Form.Control\r\n                            name=\"nextSeason\"\r\n                            value={values.nextSeason}\r\n                            onChange={handleChange}\r\n                            isInvalid={!!errors.nextSeason}\r\n                            placeholder=\"Next season\"\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.nextSeason}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"form-grid-additionalComments\">\r\n                        <Form.Label className=\"label\">Additional comments</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows=\"5\"\r\n                            name=\"additionalComments\"\r\n                            value={values.additionalComments}\r\n                            onChange={handleChange}\r\n                            isInvalid={!!errors.additionalComments}\r\n                            placeholder=\"Write any additional comments\"\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.additionalComments}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"form-grid-image\">\r\n                    <Form.File\r\n                        id=\"image\"\r\n                        name=\"image\"\r\n                        value={values.image}\r\n                        onChange={(event) => {\r\n                        handleChange(event);\r\n                        customChange(event);\r\n                        }}\r\n                        isInvalid={!!errors.image}\r\n                        label=\"Upload your cover image if you want to change it\"\r\n                        accept=\".jpg,.png\"\r\n                        custom\r\n                    />\r\n                    </Form.Group>\r\n\r\n                    <Button\r\n                        variant=\"warning\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n            </Card.Body>\r\n        </Card>\r\n        </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AnimeFormEdit;","import React, { Component } from \"react\";\r\nimport AnimeFormEdit from \"../../components/Anime/Forms/AnimeFormEdit\";\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\n\r\nclass AnimeInfoEdit extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <AnimeFormEdit anime={this.props.match} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnimeInfoEdit;","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from 'react-bootstrap/Button'\r\nimport \"./MangaInfoComponent.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n};\r\n\r\nclass MangaInfoComponent extends Component {\r\n  state = {\r\n    manga: [],\r\n  };\r\n\r\n  async getData() {\r\n    let data = await axios\r\n      .get(\r\n        \"https://lists-backend-web.herokuapp.com/api/manga/\" +\r\n          this.props.manga.params.id, {\r\n            headers: {\r\n                \"Authorization\": \"Token \" + getToken()\r\n            }\r\n          }\r\n      )\r\n      .then(function (response) {\r\n        return response.data;\r\n      });\r\n\r\n    this.setState({ manga: data });\r\n  }\r\n\r\n  handleDelete = (e) => {\r\n    axios.delete(\"https://lists-backend-web.herokuapp.com/api/manga/\" + this.state.manga.id + \"/\", {\r\n        headers: {\r\n          \"Authorization\": \"Token \" + getToken()\r\n        }\r\n      }\r\n    ).then(\r\n      function () {\r\n        window.location.href = \"https://alberto512.github.io/ListsWeb/manga/\"\r\n      }\r\n    )\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#2BDDB9\"\r\n    this.getData();\r\n  }\r\n\r\n  render() {\r\n    let path = \"/ListsWeb/manga/info/edit/\" +  this.state.manga.id;\r\n    return (\r\n      <React.Fragment>\r\n        <Grid container spacing={6}>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-manga-paper\">TITLE<br />{this.state.manga.title}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-manga-paper\">TYPE<br />{this.state.manga.type}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-manga-paper\">SAGA<br />{this.state.manga.saga}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-manga-paper\">CHAPTERS<br />{this.state.manga.chapters}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-manga-paper\">STATUS<br />{this.state.manga.status}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-manga-paper\">PERSONAL STATUS<br />{this.state.manga.personal_status}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-manga-paper\">ADDITIONAL COMMENTS<br />{this.state.manga.additional_comments}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <NavLink exact activeClassName=\"current\" to={path}>\r\n                <Button className=\"button-edit\">Edit</Button>\r\n              </NavLink>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Button className=\"button-delete\" onClick={this.handleDelete}>Delete</Button>\r\n            </Grid>\r\n      </Grid>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MangaInfoComponent;","import React, { Component } from \"react\";\r\nimport MangaInfoComponent from \"../../components/Manga/InfoComponent/MangaInfoComponent\";\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\n\r\nclass MangaInfo extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <MangaInfoComponent manga={this.props.match} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MangaInfo;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n  };\r\n\r\nclass MangaFormEdit extends Component {\r\n    state = {\r\n        manga: {\r\n            title: \"\",\r\n            type: \"\",\r\n            chapters: 0,\r\n            status: \"\",\r\n            personal_status: \"\",\r\n            saga: \"\",\r\n            additional_comments: \"\",\r\n            image: \"\"\r\n        },\r\n    };\r\n\r\n    async getData() {\r\n        let data = await axios\r\n          .get(\r\n            \"https://lists-backend-web.herokuapp.com/api/manga/\" +\r\n              this.props.manga.params.id, {\r\n                headers: {\r\n                    \"Authorization\": \"Token \" + getToken()\r\n                }\r\n              }\r\n          )\r\n          .then(function (response) {\r\n            return response.data;\r\n            });\r\n\r\n        if (!data.saga) {\r\n            data.saga = \"\"\r\n        }\r\n    \r\n        if (!data.additional_comments) {\r\n            data.additional_comments = \"\"\r\n        }\r\n        this.setState({ manga: data });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.body.style.backgroundColor = \"#2BDDB9\";\r\n        (function () {\r\n        bsCustomFileInput.init();\r\n        })();\r\n        this.getData();\r\n    }\r\n\r\n    render() {\r\n        const formData = new FormData();\r\n        let file;\r\n\r\n        const schema = Yup.object({\r\n            title: Yup.string().optional(\"Write a title for the manga\"),\r\n            type: Yup.string().oneOf(\r\n                [\"Parent story\", \"Side story\", \"Spin-off\", \"One shot\"],\r\n                \"Select one type\"\r\n            )\r\n            .optional(\"Select one type\"),\r\n            chapters: Yup.number().min(0).optional(),\r\n            status: Yup.string().oneOf(\r\n                [\"Publishing\", \"Finished\", \"Cancelled\"],\r\n                \"Select the status\"\r\n            )\r\n            .optional(\"Status of the manga\"),\r\n            personalStatus: Yup.string().oneOf(\r\n                [\"Reading\", \"Completed\", \"Plan to Read\", \"Re-reading\", \"On Hold\", \"Dropped\"],\r\n                \"Select the personal status\"\r\n            )\r\n            .optional(\"Personal status of the manga\"),\r\n            saga: Yup.string().optional(\"Saga of the manga\"),\r\n            additionalComments: Yup.string().optional(\"Write some additional comments\"),\r\n            image: Yup.string().optional(),\r\n        });\r\n\r\n        const customChange = (event) => {\r\n            file = event.target.files[0];\r\n        };\r\n\r\n        const handleSubmit = (item) => {\r\n            if (item.title !== this.state.manga.title) {\r\n                formData.append(\"title\", item.title);\r\n            }\r\n            if (item.type !== this.state.manga.type) {\r\n                formData.append(\"type\", item.type);\r\n            }\r\n            if (item.chapters !== this.state.manga.chapters) {\r\n                formData.append(\"chapters\", item.chapters);\r\n            }\r\n            if (item.status !== this.state.manga.status) {\r\n                formData.append(\"status\", item.status);\r\n            }\r\n            if (item.personalStatus !== this.state.manga.personal_status) {\r\n                formData.append(\"personal_status\", item.personalStatus);\r\n            }\r\n            if (item.saga !== this.state.manga.saga) {\r\n                formData.append(\"saga\", item.saga);\r\n            }\r\n            if (item.additionalComments !== this.state.manga.additional_comments) {\r\n                formData.append(\"additional_comments\", item.additionalComments);\r\n            }\r\n            if (file) {\r\n                formData.append(\"image\", file, item.image);\r\n            }\r\n\r\n            axios.put(\r\n                \"https://lists-backend-web.herokuapp.com/api/manga/\" + this.state.manga.id + \"/\", formData, {\r\n                    headers: {\r\n                        \"Authorization\": \"Token \" + getToken()\r\n                    }\r\n                })\r\n                .then(() => {\r\n                Swal.fire({\r\n                    title: \"Good job!\",\r\n                    text: \"Your manga has been submited\",\r\n                    icon: \"success\",\r\n                    willClose: () => {\r\n                    window.location.reload(false);\r\n                    },\r\n                });\r\n                })\r\n                .catch((error) => {\r\n                Swal.fire({\r\n                    title: \"Oops...\",\r\n                    text: \"Something went wrong\",\r\n                    icon: \"error\",\r\n                    willClose: () => {\r\n                    window.location.reload(false);\r\n                    },\r\n                });\r\n            });\r\n        };\r\n\r\n        return (\r\n        <React.Fragment>\r\n        <Card className=\"custom-card\">\r\n            <Card.Header className=\"card-header-manga\">Create new manga</Card.Header>\r\n            <Card.Body className=\"card-body-manga\">\r\n            <Formik\r\n                enableReinitialize\r\n                validationSchema={schema}\r\n                onSubmit={handleSubmit}\r\n                initialValues={{ \r\n                    title: this.state.manga.title,\r\n                    type: this.state.manga.type,\r\n                    chapters: this.state.manga.chapters,\r\n                    status: this.state.manga.status,\r\n                    personalStatus: this.state.manga.personal_status,\r\n                    saga: this.state.manga.saga,\r\n                    additionalComments: this.state.manga.additional_comments,\r\n                    image: \"\"\r\n                }}\r\n            >\r\n                {({ handleSubmit, handleChange, values, errors }) => (\r\n                <Form noValidate onSubmit={handleSubmit}>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-title\">\r\n                            <Form.Label className=\"label\">Title</Form.Label>\r\n                            <Form.Control\r\n                                name=\"title\"\r\n                                value={values.title}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.title}\r\n                                placeholder=\"Manga's title\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.title}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-type\">\r\n                            <Form.Label className=\"label\">Type</Form.Label>\r\n                            <Form.Control\r\n                                name=\"type\"\r\n                                value={values.type}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.type}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select type</option>\r\n                                <option>Parent story</option>\r\n                                <option>Side story</option>\r\n                                <option>Spin-off</option>\r\n                                <option>One shot</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.type}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-chapters\">\r\n                            <Form.Label className=\"label\">Chapters</Form.Label>\r\n                            <Form.Control\r\n                                name=\"chapters\"\r\n                                value={values.chapters}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.chapters}\r\n                                type=\"number\"\r\n                                placeholder=\"0\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.chapters}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-status\">\r\n                            <Form.Label className=\"label\">Status</Form.Label>\r\n                            <Form.Control\r\n                                name=\"status\"\r\n                                value={values.status}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.status}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select status</option>\r\n                                <option>Publishing</option>\r\n                                <option>Finished</option>\r\n                                <option>Cancelled</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.status}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-personalStatus\">\r\n                            <Form.Label className=\"label\">Personal status</Form.Label>\r\n                            <Form.Control\r\n                                name=\"personalStatus\"\r\n                                value={values.personalStatus}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.personalStatus}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select personal status</option>\r\n                                <option>Reading</option>\r\n                                <option>Completed</option>\r\n                                <option>Plan to Read</option>\r\n                                <option>Re-reading</option>\r\n                                <option>On Hold</option>\r\n                                <option>Dropped</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.personalStatus}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-saga\">\r\n                            <Form.Label className=\"label\">Saga</Form.Label>\r\n                            <Form.Control\r\n                                name=\"saga\"\r\n                                value={values.saga}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.saga}\r\n                                placeholder=\"Saga\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.saga}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Group controlId=\"form-grid-additionalComments\">\r\n                        <Form.Label className=\"label\">Additional comments</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows=\"5\"\r\n                            name=\"additionalComments\"\r\n                            value={values.additionalComments}\r\n                            onChange={handleChange}\r\n                            isInvalid={!!errors.additionalComments}\r\n                            placeholder=\"Write any additional comments\"\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.additionalComments}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"form-grid-image\">\r\n                    <Form.File\r\n                        id=\"image\"\r\n                        name=\"image\"\r\n                        value={values.image}\r\n                        onChange={(event) => {\r\n                        handleChange(event);\r\n                        customChange(event);\r\n                        }}\r\n                        isInvalid={!!errors.image}\r\n                        label=\"Upload your cover image if you want to change it\"\r\n                        accept=\".jpg,.png\"\r\n                        custom\r\n                    />\r\n                    </Form.Group>\r\n\r\n                    <Button\r\n                        variant=\"dark\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n            </Card.Body>\r\n        </Card>\r\n        </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MangaFormEdit;","import React, { Component } from \"react\";\r\nimport MangaFormEdit from \"../../components/Manga/Forms/MangaFormEdit\";\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\n\r\nclass MangaInfoEdit extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <MangaFormEdit manga={this.props.match} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MangaInfoEdit;","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from 'react-bootstrap/Button'\r\nimport \"./BookInfoComponent.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n};\r\n\r\nclass BookInfoComponent extends Component {\r\n  state = {\r\n    book: [],\r\n  };\r\n\r\n  async getData() {\r\n    let data = await axios\r\n      .get(\r\n        \"https://lists-backend-web.herokuapp.com/api/book/\" +\r\n          this.props.book.params.id, {\r\n            headers: {\r\n                \"Authorization\": \"Token \" + getToken()\r\n            }\r\n          }\r\n      )\r\n      .then(function (response) {\r\n        return response.data;\r\n      });\r\n\r\n    this.setState({ book: data });\r\n  }\r\n\r\n  handleDelete = (e) => {\r\n    axios.delete(\"https://lists-backend-web.herokuapp.com/api/book/\" + this.state.book.id + \"/\", {\r\n        headers: {\r\n          \"Authorization\": \"Token \" + getToken()\r\n        }\r\n      }\r\n    ).then(\r\n      function () {\r\n        window.location.href = \"https://alberto512.github.io/ListsWeb/book/\"\r\n      }\r\n    )\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#784500\"\r\n    this.getData();\r\n  }\r\n\r\n  render() {\r\n    let path = \"/ListsWeb/book/info/edit/\" +  this.state.book.id;\r\n    return (\r\n      <React.Fragment>\r\n        <Grid container spacing={6}>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-book-paper\">TITLE<br />{this.state.book.title}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-book-paper\">SAGA<br />{this.state.book.saga}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-book-paper\">NEXT BOOK<br />{this.state.book.next_book}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-book-paper\">VOLUME<br />{this.state.book.chapters}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-book-paper\">STATUS<br />{this.state.book.status}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-book-paper\">PERSONAL STATUS<br />{this.state.book.personal_status}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-book-paper\">ADDITIONAL COMMENTS<br />{this.state.book.additional_comments}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <NavLink exact activeClassName=\"current\" to={path}>\r\n                <Button className=\"button-edit\">Edit</Button>\r\n              </NavLink>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Button className=\"button-delete\" onClick={this.handleDelete}>Delete</Button>\r\n            </Grid>\r\n      </Grid>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BookInfoComponent;","import React, { Component } from \"react\";\r\nimport BookInfoComponent from \"../../components/Book/InfoComponent/BookInfoComponent\";\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\n\r\nclass BookInfo extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <BookInfoComponent book={this.props.match} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BookInfo;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n  };\r\n\r\nclass BookFormEdit extends Component {\r\n    state = {\r\n        book: {\r\n            title: \"\",\r\n            volume: 0,\r\n            status: \"\",\r\n            personal_status: \"\",\r\n            saga: \"\",\r\n            next_book: \"\",\r\n            additional_comments: \"\",\r\n            image: \"\"\r\n        },\r\n    };\r\n\r\n    async getData() {\r\n        let data = await axios\r\n          .get(\r\n            \"https://lists-backend-web.herokuapp.com/api/book/\" +\r\n              this.props.book.params.id, {\r\n                headers: {\r\n                    \"Authorization\": \"Token \" + getToken()\r\n                }\r\n              }\r\n          )\r\n          .then(function (response) {\r\n            return response.data;\r\n            });\r\n\r\n        if (!data.saga) {\r\n            data.saga = \"\"\r\n        }\r\n\r\n        if (!data.next_book) {\r\n            data.next_book = \"\"\r\n        }\r\n    \r\n        if (!data.additional_comments) {\r\n            data.additional_comments = \"\"\r\n        }\r\n        this.setState({ book: data });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.body.style.backgroundColor = \"#784500\";\r\n        (function () {\r\n        bsCustomFileInput.init();\r\n        })();\r\n        this.getData();\r\n    }\r\n\r\n    render() {\r\n        const formData = new FormData();\r\n        let file;\r\n\r\n        const schema = Yup.object({\r\n            title: Yup.string().optional(\"Write a title for the book\"),\r\n            volume: Yup.number().min(0).optional(),\r\n            status: Yup.string().oneOf(\r\n                [\"Publishing\", \"Finished\", \"Cancelled\"],\r\n                \"Select the status\"\r\n            )\r\n            .optional(\"Status of the book\"),\r\n            personalStatus: Yup.string().oneOf(\r\n                [\"Reading\", \"Completed\", \"Plan to Read\", \"Re-reading\", \"On Hold\", \"Dropped\"],\r\n                \"Select the personal status\"\r\n            )\r\n            .optional(\"Personal status of the book\"),\r\n            saga: Yup.string().optional(\"Saga of the book\"),\r\n            nextBook: Yup.string().optional(\"Next book of the saga\"),\r\n            additionalComments: Yup.string().optional(\"Write some additional comments\"),\r\n            image: Yup.string().optional(),\r\n        });\r\n\r\n        const customChange = (event) => {\r\n            file = event.target.files[0];\r\n        };\r\n\r\n        const handleSubmit = (item) => {\r\n            if (item.title !== this.state.book.title) {\r\n                formData.append(\"title\", item.title);\r\n            }\r\n            if (item.volume !== this.state.book.volume) {\r\n                formData.append(\"volume\", item.volume);\r\n            }\r\n            if (item.status !== this.state.book.status) {\r\n                formData.append(\"status\", item.status);\r\n            }\r\n            if (item.personalStatus !== this.state.book.personal_status) {\r\n                formData.append(\"personal_status\", item.personalStatus);\r\n            }\r\n            if (item.saga !== this.state.book.saga) {\r\n                formData.append(\"saga\", item.saga);\r\n            }\r\n            if (item.nextBook !== this.state.book.next_book) {\r\n                formData.append(\"next_book\", item.nextBook);\r\n            }\r\n            if (item.additionalComments !== this.state.book.additional_comments) {\r\n                formData.append(\"additional_comments\", item.additionalComments);\r\n            }\r\n            if (file) {\r\n                formData.append(\"image\", file, item.image);\r\n            }\r\n\r\n            axios.put(\r\n                \"https://lists-backend-web.herokuapp.com/api/book/\" + this.state.book.id + \"/\", formData, {\r\n                    headers: {\r\n                        \"Authorization\": \"Token \" + getToken()\r\n                    }\r\n                })\r\n                .then(() => {\r\n                Swal.fire({\r\n                    title: \"Good job!\",\r\n                    text: \"Your book has been submited\",\r\n                    icon: \"success\",\r\n                    willClose: () => {\r\n                    window.location.reload(false);\r\n                    },\r\n                });\r\n                })\r\n                .catch((error) => {\r\n                Swal.fire({\r\n                    title: \"Oops...\",\r\n                    text: \"Something went wrong\",\r\n                    icon: \"error\",\r\n                    willClose: () => {\r\n                    window.location.reload(false);\r\n                    },\r\n                });\r\n            });\r\n        };\r\n\r\n        return (\r\n        <React.Fragment>\r\n        <Card className=\"custom-card\">\r\n            <Card.Header className=\"card-header-book\">Create new book</Card.Header>\r\n            <Card.Body className=\"card-body-book\">\r\n            <Formik\r\n                enableReinitialize\r\n                validationSchema={schema}\r\n                onSubmit={handleSubmit}\r\n                initialValues={{ \r\n                    title: this.state.book.title,\r\n                    volume: this.state.book.volume,\r\n                    status: this.state.book.status,\r\n                    personalStatus: this.state.book.personal_status,\r\n                    saga: this.state.book.saga,\r\n                    nextBook: this.state.book.next_book,\r\n                    additionalComments: this.state.book.additional_comments,\r\n                    image: \"\"\r\n                }}\r\n            >\r\n                {({ handleSubmit, handleChange, values, errors }) => (\r\n                <Form noValidate onSubmit={handleSubmit}>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-title\">\r\n                            <Form.Label className=\"label\">Title</Form.Label>\r\n                            <Form.Control\r\n                                name=\"title\"\r\n                                value={values.title}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.title}\r\n                                placeholder=\"Book's title\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.title}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-volume\">\r\n                            <Form.Label className=\"label\">Volume</Form.Label>\r\n                            <Form.Control\r\n                                name=\"volume\"\r\n                                value={values.volume}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.volume}\r\n                                type=\"number\"\r\n                                placeholder=\"0\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.volume}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-status\">\r\n                            <Form.Label className=\"label\">Status</Form.Label>\r\n                            <Form.Control\r\n                                name=\"status\"\r\n                                value={values.status}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.status}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select status</option>\r\n                                <option>Publishing</option>\r\n                                <option>Finished</option>\r\n                                <option>Cancelled</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.status}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-personalStatus\">\r\n                            <Form.Label className=\"label\">Personal status</Form.Label>\r\n                            <Form.Control\r\n                                name=\"personalStatus\"\r\n                                value={values.personalStatus}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.personalStatus}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select personal status</option>\r\n                                <option>Reading</option>\r\n                                <option>Completed</option>\r\n                                <option>Plan to Read</option>\r\n                                <option>Re-reading</option>\r\n                                <option>On Hold</option>\r\n                                <option>Dropped</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.personalStatus}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-saga\">\r\n                            <Form.Label className=\"label\">Saga</Form.Label>\r\n                            <Form.Control\r\n                                name=\"saga\"\r\n                                value={values.saga}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.saga}\r\n                                placeholder=\"Saga\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.saga}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Group controlId=\"form-grid-nextBook\">\r\n                        <Form.Label className=\"label\">Next book</Form.Label>\r\n                        <Form.Control\r\n                            name=\"nextBook\"\r\n                            value={values.nextBook}\r\n                            onChange={handleChange}\r\n                            isInvalid={!!errors.nextBook}\r\n                            placeholder=\"Next book\"\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.nextBook}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"form-grid-additionalComments\">\r\n                        <Form.Label className=\"label\">Additional comments</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows=\"5\"\r\n                            name=\"additionalComments\"\r\n                            value={values.additionalComments}\r\n                            onChange={handleChange}\r\n                            isInvalid={!!errors.additionalComments}\r\n                            placeholder=\"Write any additional comments\"\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.additionalComments}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"form-grid-image\">\r\n                    <Form.File\r\n                        id=\"image\"\r\n                        name=\"image\"\r\n                        value={values.image}\r\n                        onChange={(event) => {\r\n                        handleChange(event);\r\n                        customChange(event);\r\n                        }}\r\n                        isInvalid={!!errors.image}\r\n                        label=\"Upload your cover image if you want to change it\"\r\n                        accept=\".jpg,.png\"\r\n                        custom\r\n                    />\r\n                    </Form.Group>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n            </Card.Body>\r\n        </Card>\r\n        </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BookFormEdit;","import React, { Component } from \"react\";\r\nimport BookFormEdit from \"../../components/Book/Forms/BookFormEdit\";\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\n\r\nclass BookInfoEdit extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <BookFormEdit book={this.props.match} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BookInfoEdit;","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from 'react-bootstrap/Button'\r\nimport \"./MovieInfoComponent.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n};\r\n\r\nclass MovieInfoComponent extends Component {\r\n  state = {\r\n    movie: [],\r\n  };\r\n\r\n  async getData() {\r\n    let data = await axios\r\n      .get(\r\n        \"https://lists-backend-web.herokuapp.com/api/movie/\" +\r\n          this.props.movie.params.id, {\r\n            headers: {\r\n                \"Authorization\": \"Token \" + getToken()\r\n            }\r\n          }\r\n      )\r\n      .then(function (response) {\r\n        return response.data;\r\n      });\r\n\r\n    this.setState({ movie: data });\r\n  }\r\n\r\n  handleDelete = (e) => {\r\n    axios.delete(\"https://lists-backend-web.herokuapp.com/api/movie/\" + this.state.movie.id + \"/\", {\r\n        headers: {\r\n          \"Authorization\": \"Token \" + getToken()\r\n        }\r\n      }\r\n    ).then(\r\n      function () {\r\n        window.location.href = \"https://alberto512.github.io/ListsWeb/movie/\"\r\n      }\r\n    )\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#008E18\"\r\n    this.getData();\r\n  }\r\n\r\n  render() {\r\n    let path = \"/ListsWeb/movie/info/edit/\" +  this.state.movie.id;\r\n    return (\r\n      <React.Fragment>\r\n        <Grid container spacing={6}>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-movie-paper\">TITLE<br />{this.state.movie.title}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-movie-paper\">SAGA<br />{this.state.movie.saga}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-movie-paper\">NEXT MOVIE<br />{this.state.movie.next_movie}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-movie-paper\">INSTALLMENT<br />{this.state.movie.chapters}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-movie-paper\">STATUS<br />{this.state.movie.status}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-movie-paper\">PERSONAL STATUS<br />{this.state.movie.personal_status}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-movie-paper\">PLATFORM<br />{this.state.movie.platform}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-movie-paper\">ADDITIONAL COMMENTS<br />{this.state.movie.additional_comments}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <NavLink exact activeClassName=\"current\" to={path}>\r\n                <Button className=\"button-edit\">Edit</Button>\r\n              </NavLink>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Button className=\"button-delete\" onClick={this.handleDelete}>Delete</Button>\r\n            </Grid>\r\n      </Grid>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieInfoComponent;","import React, { Component } from \"react\";\r\nimport MovieInfoComponent from \"../../components/Movie/InfoComponent/MovieInfoComponent\";\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\n\r\nclass MovieInfo extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <MovieInfoComponent movie={this.props.match} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieInfo;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n  };\r\n\r\nclass MovieFormEdit extends Component {\r\n    state = {\r\n        movie: {\r\n            title: \"\",\r\n            installment: 0,\r\n            status: \"\",\r\n            personal_status: \"\",\r\n            saga: \"\",\r\n            next_movie: \"\",\r\n            platform: \"\",\r\n            additional_comments: \"\",\r\n            image: \"\"\r\n        },\r\n    };\r\n\r\n    async getData() {\r\n        let data = await axios\r\n          .get(\r\n            \"https://lists-backend-web.herokuapp.com/api/movie/\" +\r\n              this.props.movie.params.id, {\r\n                headers: {\r\n                    \"Authorization\": \"Token \" + getToken()\r\n                }\r\n              }\r\n          )\r\n          .then(function (response) {\r\n            return response.data;\r\n            });\r\n\r\n        if (!data.saga) {\r\n            data.saga = \"\"\r\n        }\r\n\r\n        if (!data.next_movie) {\r\n            data.next_movie = \"\"\r\n        }\r\n\r\n        if (!data.platform) {\r\n            data.platform = \"\"\r\n        }\r\n    \r\n        if (!data.additional_comments) {\r\n            data.additional_comments = \"\"\r\n        }\r\n        this.setState({ movie: data });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.body.style.backgroundColor = \"#008E18\";\r\n        (function () {\r\n        bsCustomFileInput.init();\r\n        })();\r\n        this.getData();\r\n    }\r\n\r\n    render() {\r\n        const formData = new FormData();\r\n        let file;\r\n\r\n        const schema = Yup.object({\r\n            title: Yup.string().optional(\"Write a title for the movie\"),\r\n            installment: Yup.number().min(0).optional(),\r\n            status: Yup.string().oneOf(\r\n                [\"Realeasing\", \"Finished\", \"Cancelled\"],\r\n                \"Select the status\"\r\n            )\r\n            .optional(\"Status of the movie\"),\r\n            personalStatus: Yup.string().oneOf(\r\n                [\"Watching\", \"Completed\", \"Plan to Watch\", \"Re-watching\", \"On Hold\", \"Dropped\"],\r\n                \"Select the personal status\"\r\n            )\r\n            .optional(\"Personal status of the movie\"),\r\n            saga: Yup.string().optional(\"Saga of the movie\"),\r\n            nextMovie: Yup.string().optional(\"Next movie of the saga\"),\r\n            platform: Yup.string().optional(\"Platform where you can find the movie\"),\r\n            additionalComments: Yup.string().optional(\"Write some additional comments\"),\r\n            image: Yup.string().optional(),\r\n        });\r\n\r\n        const customChange = (event) => {\r\n            file = event.target.files[0];\r\n        };\r\n\r\n        const handleSubmit = (item) => {\r\n            if (item.title !== this.state.movie.title) {\r\n                formData.append(\"title\", item.title);\r\n            }\r\n            if (item.installment !== this.state.movie.installment) {\r\n                formData.append(\"installment\", item.installment);\r\n            }\r\n            if (item.status !== this.state.movie.status) {\r\n                formData.append(\"status\", item.status);\r\n            }\r\n            if (item.personalStatus !== this.state.movie.personal_status) {\r\n                formData.append(\"personal_status\", item.personalStatus);\r\n            }\r\n            if (item.saga !== this.state.movie.saga) {\r\n                formData.append(\"saga\", item.saga);\r\n            }\r\n            if (item.nextMovie !== this.state.movie.next_movie) {\r\n                formData.append(\"next_movie\", item.nextMovie);\r\n            }\r\n            if (item.platform !== this.state.movie.platform) {\r\n                formData.append(\"platform\", item.platform);\r\n            }\r\n            if (item.additionalComments !== this.state.movie.additional_comments) {\r\n                formData.append(\"additional_comments\", item.additionalComments);\r\n            }\r\n            if (file) {\r\n                formData.append(\"image\", file, item.image);\r\n            }\r\n\r\n            axios.put(\r\n                \"https://lists-backend-web.herokuapp.com/api/movie/\" + this.state.movie.id + \"/\", formData, {\r\n                    headers: {\r\n                        \"Authorization\": \"Token \" + getToken()\r\n                    }\r\n                })\r\n                .then(() => {\r\n                Swal.fire({\r\n                    title: \"Good job!\",\r\n                    text: \"Your movie has been submited\",\r\n                    icon: \"success\",\r\n                    willClose: () => {\r\n                    window.location.reload(false);\r\n                    },\r\n                });\r\n                })\r\n                .catch((error) => {\r\n                Swal.fire({\r\n                    title: \"Oops...\",\r\n                    text: \"Something went wrong\",\r\n                    icon: \"error\",\r\n                    willClose: () => {\r\n                    window.location.reload(false);\r\n                    },\r\n                });\r\n            });\r\n        };\r\n\r\n        return (\r\n        <React.Fragment>\r\n        <Card className=\"custom-card\">\r\n            <Card.Header className=\"card-header-movie\">Create new movie</Card.Header>\r\n            <Card.Body className=\"card-body-movie\">\r\n            <Formik\r\n                enableReinitialize\r\n                validationSchema={schema}\r\n                onSubmit={handleSubmit}\r\n                initialValues={{ \r\n                    title: this.state.movie.title,\r\n                    installment: this.state.movie.installment,\r\n                    status: this.state.movie.status,\r\n                    personalStatus: this.state.movie.personal_status,\r\n                    saga: this.state.movie.saga,\r\n                    nextMovie: this.state.movie.next_movie,\r\n                    platform: this.state.movie.platform,\r\n                    additionalComments: this.state.movie.additional_comments,\r\n                    image: \"\"\r\n                }}\r\n            >\r\n                {({ handleSubmit, handleChange, values, errors }) => (\r\n                <Form noValidate onSubmit={handleSubmit}>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-title\">\r\n                            <Form.Label className=\"label\">Title</Form.Label>\r\n                            <Form.Control\r\n                                name=\"title\"\r\n                                value={values.title}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.title}\r\n                                placeholder=\"Movie's title\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.title}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-installment\">\r\n                            <Form.Label className=\"label\">Installment</Form.Label>\r\n                            <Form.Control\r\n                                name=\"installment\"\r\n                                value={values.installment}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.installment}\r\n                                type=\"number\"\r\n                                placeholder=\"0\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.installment}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-status\">\r\n                            <Form.Label className=\"label\">Status</Form.Label>\r\n                            <Form.Control\r\n                                name=\"status\"\r\n                                value={values.status}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.status}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select status</option>\r\n                                <option>Realeasing</option>\r\n                                <option>Finished</option>\r\n                                <option>Cancelled</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.status}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-personalStatus\">\r\n                            <Form.Label className=\"label\">Personal status</Form.Label>\r\n                            <Form.Control\r\n                                name=\"personalStatus\"\r\n                                value={values.personalStatus}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.personalStatus}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select personal status</option>\r\n                                <option>Watching</option>\r\n                                <option>Completed</option>\r\n                                <option>Plan to Watch</option>\r\n                                <option>Re-watching</option>\r\n                                <option>On Hold</option>\r\n                                <option>Dropped</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.personalStatus}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-saga\">\r\n                            <Form.Label className=\"label\">Saga</Form.Label>\r\n                            <Form.Control\r\n                                name=\"saga\"\r\n                                value={values.saga}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.saga}\r\n                                placeholder=\"Saga\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.saga}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Group controlId=\"form-grid-nextMovie\">\r\n                        <Form.Label className=\"label\">Next movie</Form.Label>\r\n                        <Form.Control\r\n                            name=\"nextMovie\"\r\n                            value={values.nextMovie}\r\n                            onChange={handleChange}\r\n                            isInvalid={!!errors.nextMovie}\r\n                            placeholder=\"Next movie\"\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.nextMovie}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"form-grid-platform\">\r\n                        <Form.Label className=\"label\">Platform</Form.Label>\r\n                        <Form.Control\r\n                            name=\"platform\"\r\n                            value={values.platform}\r\n                            onChange={handleChange}\r\n                            isInvalid={!!errors.platform}\r\n                            placeholder=\"Platform\"\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.platform}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"form-grid-additionalComments\">\r\n                        <Form.Label className=\"label\">Additional comments</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows=\"5\"\r\n                            name=\"additionalComments\"\r\n                            value={values.additionalComments}\r\n                            onChange={handleChange}\r\n                            isInvalid={!!errors.additionalComments}\r\n                            placeholder=\"Write any additional comments\"\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.additionalComments}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"form-grid-image\">\r\n                    <Form.File\r\n                        id=\"image\"\r\n                        name=\"image\"\r\n                        value={values.image}\r\n                        onChange={(event) => {\r\n                        handleChange(event);\r\n                        customChange(event);\r\n                        }}\r\n                        isInvalid={!!errors.image}\r\n                        label=\"Upload your cover image if you want to change it\"\r\n                        accept=\".jpg,.png\"\r\n                        custom\r\n                    />\r\n                    </Form.Group>\r\n\r\n                    <Button\r\n                        variant=\"light\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n            </Card.Body>\r\n        </Card>\r\n        </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieFormEdit;","import React, { Component } from \"react\";\r\nimport MovieFormEdit from \"../../components/Movie/Forms/MovieFormEdit\";\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\n\r\nclass MovieInfoEdit extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <MovieFormEdit movie={this.props.match} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieInfoEdit;","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Button from 'react-bootstrap/Button'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport \"./SeriesInfoComponent.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n};\r\n\r\nclass SeriesInfoComponent extends Component {\r\n  state = {\r\n    series: [],\r\n  };\r\n\r\n  async getData() {\r\n    let data = await axios\r\n      .get(\r\n        \"https://lists-backend-web.herokuapp.com/api/series/\" +\r\n          this.props.series.params.id, {\r\n            headers: {\r\n                \"Authorization\": \"Token \" + getToken()\r\n            }\r\n          }\r\n      )\r\n      .then(function (response) {\r\n        return response.data;\r\n      });\r\n\r\n    this.setState({ series: data });\r\n  }\r\n\r\n  handleDelete = (e) => {\r\n    axios.delete(\"https://lists-backend-web.herokuapp.com/api/series/\" + this.state.series.id + \"/\", {\r\n        headers: {\r\n          \"Authorization\": \"Token \" + getToken()\r\n        }\r\n      }\r\n    ).then(\r\n      function () {\r\n        window.location.href = \"https://alberto512.github.io/ListsWeb/series/\"\r\n      }\r\n    )\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#D90C0C\"\r\n    this.getData();\r\n  }\r\n\r\n  render() {\r\n    let path = \"/ListsWeb/series/info/edit/\" +  this.state.series.id;\r\n    return (\r\n      <React.Fragment>\r\n        <Grid container spacing={6}>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-series-paper\">TITLE<br />{this.state.series.title}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-series-paper\">TYPE<br />{this.state.series.type}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-series-paper\">SEASONS<br />{this.state.series.seasons}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-series-paper\">STATUS<br />{this.state.series.status}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-series-paper\">PERSONAL STATUS<br />{this.state.series.personal_status}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-series-paper\">PLATFORM<br />{this.state.series.platform}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-series-paper\">NEXT SEASON<br />{this.state.series.next_season}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-series-paper\">ADDITIONAL COMMENTS<br />{this.state.series.additional_comments}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <NavLink exact activeClassName=\"current\" to={path}>\r\n                <Button className=\"button-edit\">Edit</Button>\r\n              </NavLink>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Button className=\"button-delete\" onClick={this.handleDelete}>Delete</Button>\r\n            </Grid>\r\n      </Grid>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SeriesInfoComponent;","import React, { Component } from \"react\";\r\nimport SeriesInfoComponent from \"../../components/Series/InfoComponent/SeriesInfoComponent\";\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\n\r\nclass SeriesInfo extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <SeriesInfoComponent series={this.props.match} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SeriesInfo;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n  };\r\n\r\nclass SeriesFormEdit extends Component {\r\n    state = {\r\n        series: {\r\n            title: \"\",\r\n            type: \"\",\r\n            seasons: 0,\r\n            status: \"\",\r\n            personal_status: \"\",\r\n            platform: \"\",\r\n            next_season: \"\",\r\n            additional_comments: \"\",\r\n            image: \"\"\r\n        },\r\n    };\r\n\r\n    async getData() {\r\n        let data = await axios\r\n          .get(\r\n            \"https://lists-backend-web.herokuapp.com/api/series/\" +\r\n              this.props.series.params.id, {\r\n                headers: {\r\n                    \"Authorization\": \"Token \" + getToken()\r\n                }\r\n              }\r\n          )\r\n          .then(function (response) {\r\n            return response.data;\r\n            });\r\n\r\n        if (!data.platform) {\r\n            data.platform = \"\"\r\n        }\r\n\r\n        if (!data.next_season) {\r\n            data.next_season = \"\"\r\n        }\r\n    \r\n        if (!data.additional_comments) {\r\n            data.additional_comments = \"\"\r\n        }\r\n        this.setState({ series: data });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.body.style.backgroundColor = \"#D90C0C\";\r\n        (function () {\r\n        bsCustomFileInput.init();\r\n        })();\r\n        this.getData();\r\n    }\r\n\r\n    render() {\r\n        const formData = new FormData();\r\n        let file;\r\n\r\n        const schema = Yup.object({\r\n            title: Yup.string().optional(\"Write a title for the series\"),\r\n            type: Yup.string().oneOf(\r\n                [\"Series\", \"Reality show\"],\r\n                \"Select one type\"\r\n            )\r\n            .optional(\"Select one type\"),\r\n            seasons: Yup.number().min(0).optional(),\r\n            status: Yup.string().oneOf(\r\n                [\"Airing\", \"Finished\", \"Pending\", \"Cancelled\"],\r\n                \"Select the status\"\r\n            )\r\n            .optional(\"Status of the series\"),\r\n            personalStatus: Yup.string().oneOf(\r\n                [\"Watching\", \"Completed\", \"Plan to Watch\", \"Re-watching\", \"On Hold\", \"Dropped\"],\r\n                \"Select the personal status\"\r\n            )\r\n            .optional(\"Personal status of the series\"),\r\n            platform: Yup.string().optional(\"Platform where you can find the series\"),\r\n            nextSeason: Yup.string().optional(\"Next season of the series\"),\r\n            additionalComments: Yup.string().optional(\"Write some additional comments\"),\r\n            image: Yup.string().optional(),\r\n        });\r\n\r\n        const customChange = (event) => {\r\n            file = event.target.files[0];\r\n        };\r\n\r\n        const handleSubmit = (item) => {\r\n            if (item.title !== this.state.series.title) {\r\n                formData.append(\"title\", item.title);\r\n            }\r\n            if (item.type !== this.state.series.type) {\r\n                formData.append(\"type\", item.type);\r\n            }\r\n            if (item.seasons !== this.state.series.seasons) {\r\n                formData.append(\"seasons\", item.seasons);\r\n            }\r\n            if (item.status !== this.state.series.status) {\r\n                formData.append(\"status\", item.status);\r\n            }\r\n            if (item.personalStatus !== this.state.series.personal_status) {\r\n                formData.append(\"personal_status\", item.personalStatus);\r\n            }\r\n            if (item.platform !== this.state.series.platform) {\r\n                formData.append(\"platform\", item.platform);\r\n            }\r\n            if (item.nextSeason !== this.state.series.next_season) {\r\n                formData.append(\"next_season\", item.nextSeason);\r\n            }\r\n            if (item.additionalComments !== this.state.series.additional_comments) {\r\n                formData.append(\"additional_comments\", item.additionalComments);\r\n            }\r\n            if (file) {\r\n                formData.append(\"image\", file, item.image);\r\n            }\r\n\r\n            axios.put(\r\n                \"https://lists-backend-web.herokuapp.com/api/series/\" + this.state.series.id + \"/\", formData, {\r\n                    headers: {\r\n                        \"Authorization\": \"Token \" + getToken()\r\n                    }\r\n                })\r\n                .then(() => {\r\n                Swal.fire({\r\n                    title: \"Good job!\",\r\n                    text: \"Your series has been submited\",\r\n                    icon: \"success\",\r\n                    willClose: () => {\r\n                    window.location.reload(false);\r\n                    },\r\n                });\r\n                })\r\n                .catch((error) => {\r\n                Swal.fire({\r\n                    title: \"Oops...\",\r\n                    text: \"Something went wrong\",\r\n                    icon: \"error\",\r\n                    willClose: () => {\r\n                    window.location.reload(false);\r\n                    },\r\n                });\r\n            });\r\n        };\r\n\r\n        return (\r\n        <React.Fragment>\r\n        <Card className=\"custom-card\">\r\n            <Card.Header className=\"card-header-series\">Create new series</Card.Header>\r\n            <Card.Body className=\"card-body-series\">\r\n            <Formik\r\n                enableReinitialize\r\n                validationSchema={schema}\r\n                onSubmit={handleSubmit}\r\n                initialValues={{ \r\n                    title: this.state.series.title,\r\n                    type: this.state.series.type,\r\n                    seasons: this.state.series.seasons,\r\n                    status: this.state.series.status,\r\n                    personalStatus: this.state.series.personal_status,\r\n                    platform: this.state.series.platform,\r\n                    nextSeason: this.state.series.next_season,\r\n                    additionalComments: this.state.series.additional_comments,\r\n                    image: \"\"\r\n                }}\r\n            >\r\n                {({ handleSubmit, handleChange, values, errors }) => (\r\n                <Form noValidate onSubmit={handleSubmit}>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-title\">\r\n                            <Form.Label className=\"label\">Title</Form.Label>\r\n                            <Form.Control\r\n                                name=\"title\"\r\n                                value={values.title}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.title}\r\n                                placeholder=\"Series's title\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.title}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-type\">\r\n                            <Form.Label className=\"label\">Type</Form.Label>\r\n                            <Form.Control\r\n                                name=\"type\"\r\n                                value={values.type}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.type}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select type</option>\r\n                                <option>Series</option>\r\n                                <option>Reality show</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.type}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-seasons\">\r\n                            <Form.Label className=\"label\">Seasons</Form.Label>\r\n                            <Form.Control\r\n                                name=\"seasons\"\r\n                                value={values.seasons}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.seasons}\r\n                                type=\"number\"\r\n                                placeholder=\"0\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.seasons}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-status\">\r\n                            <Form.Label className=\"label\">Status</Form.Label>\r\n                            <Form.Control\r\n                                name=\"status\"\r\n                                value={values.status}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.status}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select status</option>\r\n                                <option>Airing</option>\r\n                                <option>Finished</option>\r\n                                <option>Pending</option>\r\n                                <option>Cancelled</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.status}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-personalStatus\">\r\n                            <Form.Label className=\"label\">Personal status</Form.Label>\r\n                            <Form.Control\r\n                                name=\"personalStatus\"\r\n                                value={values.personalStatus}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.personalStatus}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select personal status</option>\r\n                                <option>Watching</option>\r\n                                <option>Completed</option>\r\n                                <option>Plan to Watch</option>\r\n                                <option>Re-watching</option>\r\n                                <option>On Hold</option>\r\n                                <option>Dropped</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.personalStatus}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-platform\">\r\n                            <Form.Label className=\"label\">Platform</Form.Label>\r\n                            <Form.Control\r\n                                name=\"platform\"\r\n                                value={values.platform}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.platform}\r\n                                placeholder=\"Platform\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.platform}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Group as={Col} controlId=\"form-grid-nextSeason\">\r\n                        <Form.Label className=\"label\">Next season</Form.Label>\r\n                        <Form.Control\r\n                            name=\"nextSeason\"\r\n                            value={values.nextSeason}\r\n                            onChange={handleChange}\r\n                            isInvalid={!!errors.nextSeason}\r\n                            placeholder=\"Next season\"\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.nextSeason}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"form-grid-additionalComments\">\r\n                        <Form.Label className=\"label\">Additional comments</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows=\"5\"\r\n                            name=\"additionalComments\"\r\n                            value={values.additionalComments}\r\n                            onChange={handleChange}\r\n                            isInvalid={!!errors.additionalComments}\r\n                            placeholder=\"Write any additional comments\"\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.additionalComments}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"form-grid-image\">\r\n                    <Form.File\r\n                        id=\"image\"\r\n                        name=\"image\"\r\n                        value={values.image}\r\n                        onChange={(event) => {\r\n                        handleChange(event);\r\n                        customChange(event);\r\n                        }}\r\n                        isInvalid={!!errors.image}\r\n                        label=\"Upload your cover image if you want to change it\"\r\n                        accept=\".jpg,.png\"\r\n                        custom\r\n                    />\r\n                    </Form.Group>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n            </Card.Body>\r\n        </Card>\r\n        </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SeriesFormEdit;","import React, { Component } from \"react\";\r\nimport SeriesFormEdit from \"../../components/Series/Forms/SeriesFormEdit\";\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\n\r\nclass SeriesInfoEdit extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <SeriesFormEdit series={this.props.match} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SeriesInfoEdit;","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from 'react-bootstrap/Button'\r\nimport \"./VideogameInfoComponent.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n};\r\n\r\nclass VideogameInfoComponent extends Component {\r\n  state = {\r\n    videogame: [],\r\n  };\r\n\r\n  async getData() {\r\n    let data = await axios\r\n      .get(\r\n        \"https://lists-backend-web.herokuapp.com/api/videogame/\" +\r\n          this.props.videogame.params.id, {\r\n            headers: {\r\n                \"Authorization\": \"Token \" + getToken()\r\n            }\r\n          }\r\n      )\r\n      .then(function (response) {\r\n        return response.data;\r\n      });\r\n\r\n    this.setState({ videogame: data });\r\n  }\r\n\r\n  handleDelete = (e) => {\r\n    axios.delete(\"https://lists-backend-web.herokuapp.com/api/videogame/\" + this.state.videogame.id + \"/\", {\r\n        headers: {\r\n          \"Authorization\": \"Token \" + getToken()\r\n        }\r\n      }\r\n    ).then(\r\n      function () {\r\n        window.location.href = \"https://alberto512.github.io/ListsWeb/videogame/\"\r\n      }\r\n    )\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#FFF97D\"\r\n    this.getData();\r\n  }\r\n\r\n  render() {\r\n    let path = \"/ListsWeb/videogame/info/edit/\" +  this.state.videogame.id;\r\n    return (\r\n      <React.Fragment>\r\n        <Grid container spacing={6}>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-videogame-paper\">TITLE<br />{this.state.videogame.title}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-videogame-paper\">FRANCHISE<br />{this.state.videogame.saga}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-videogame-paper\">NEXT VIDEOGAME<br />{this.state.videogame.next_videogame}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-videogame-paper\">INSTALLMENT<br />{this.state.videogame.chapters}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-videogame-paper\">STATUS<br />{this.state.videogame.status}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-videogame-paper\">PERSONAL STATUS<br />{this.state.videogame.personal_status}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-videogame-paper\">PLATFORM<br />{this.state.videogame.platform}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-videogame-paper\">ADDITIONAL COMMENTS<br />{this.state.videogame.additional_comments}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <NavLink exact activeClassName=\"current\" to={path}>\r\n                <Button className=\"button-edit\">Edit</Button>\r\n              </NavLink>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Button className=\"button-delete\" onClick={this.handleDelete}>Delete</Button>\r\n            </Grid>\r\n      </Grid>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VideogameInfoComponent;","import React, { Component } from \"react\";\r\nimport VideogameInfoComponent from \"../../components/Videogame/InfoComponent/VideogameInfoComponent\";\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\n\r\nclass VideogameInfo extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <VideogameInfoComponent videogame={this.props.match} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VideogameInfo;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n  };\r\n\r\nclass VideogameFormEdit extends Component {\r\n    state = {\r\n        videogame: {\r\n            title: \"\",\r\n            installment: 0,\r\n            status: \"\",\r\n            personal_status: \"\",\r\n            franchise: \"\",\r\n            next_videogame: \"\",\r\n            platform: \"\",\r\n            additional_comments: \"\",\r\n            image: \"\"\r\n        },\r\n    };\r\n\r\n    async getData() {\r\n        let data = await axios\r\n          .get(\r\n            \"https://lists-backend-web.herokuapp.com/api/videogame/\" +\r\n              this.props.videogame.params.id, {\r\n                headers: {\r\n                    \"Authorization\": \"Token \" + getToken()\r\n                }\r\n              }\r\n          )\r\n          .then(function (response) {\r\n            return response.data;\r\n            });\r\n\r\n        if (!data.franchise) {\r\n            data.franchise = \"\"\r\n        }\r\n\r\n        if (!data.next_videogame) {\r\n            data.next_videogame = \"\"\r\n        }\r\n\r\n        if (!data.platform) {\r\n            data.platform = \"\"\r\n        }\r\n    \r\n        if (!data.additional_comments) {\r\n            data.additional_comments = \"\"\r\n        }\r\n        this.setState({ videogame: data });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.body.style.backgroundColor = \"#FFF97D\";\r\n        (function () {\r\n        bsCustomFileInput.init();\r\n        })();\r\n        this.getData();\r\n    }\r\n\r\n    render() {\r\n        const formData = new FormData();\r\n        let file;\r\n\r\n        const schema = Yup.object({\r\n            title: Yup.string().optional(\"Write a title for the videogame\"),\r\n            installment: Yup.number().min(0).optional(),\r\n            status: Yup.string().oneOf(\r\n                [\"Publishing\", \"Finished\", \"Cancelled\"],\r\n                \"Select the status\"\r\n            )\r\n            .optional(\"Status of the videogame\"),\r\n            personalStatus: Yup.string().oneOf(\r\n                [\"Playing\", \"Completed\", \"Plan to Play\", \"Re-playing\", \"On Hold\", \"Dropped\"],\r\n                \"Select the personal status\"\r\n            )\r\n            .optional(\"Personal status of the videogame\"),\r\n            franchise: Yup.string().optional(\"Franchise of the videogame\"),\r\n            nextVideogame: Yup.string().optional(\"Next videogame of the saga\"),\r\n            platform: Yup.string().optional(\"Platform where you can find the videogame\"),\r\n            additionalComments: Yup.string().optional(\"Write some additional comments\"),\r\n            image: Yup.string().optional(),\r\n        });\r\n\r\n        const customChange = (event) => {\r\n            file = event.target.files[0];\r\n        };\r\n\r\n        const handleSubmit = (item) => {\r\n            if (item.title !== this.state.videogame.title) {\r\n                formData.append(\"title\", item.title);\r\n            }\r\n            if (item.installment !== this.state.videogame.installment) {\r\n                formData.append(\"installment\", item.installment);\r\n            }\r\n            if (item.status !== this.state.videogame.status) {\r\n                formData.append(\"status\", item.status);\r\n            }\r\n            if (item.personalStatus !== this.state.videogame.personal_status) {\r\n                formData.append(\"personal_status\", item.personalStatus);\r\n            }\r\n            if (item.franchise !== this.state.videogame.franchise) {\r\n                formData.append(\"franchise\", item.franchise);\r\n            }\r\n            if (item.nextVideogame !== this.state.videogame.next_videogame) {\r\n                formData.append(\"next_videogame\", item.nextVideogame);\r\n            }\r\n            if (item.platform !== this.state.videogame.platform) {\r\n                formData.append(\"platform\", item.platform);\r\n            }\r\n            if (item.additionalComments !== this.state.videogame.additional_comments) {\r\n                formData.append(\"additional_comments\", item.additionalComments);\r\n            }\r\n            if (file) {\r\n                formData.append(\"image\", file, item.image);\r\n            }\r\n\r\n            axios.put(\r\n                \"https://lists-backend-web.herokuapp.com/api/videogame/\" + this.state.videogame.id + \"/\", formData, {\r\n                    headers: {\r\n                        \"Authorization\": \"Token \" + getToken()\r\n                    }\r\n                })\r\n                .then(() => {\r\n                Swal.fire({\r\n                    title: \"Good job!\",\r\n                    text: \"Your videogame has been submited\",\r\n                    icon: \"success\",\r\n                    willClose: () => {\r\n                    window.location.reload(false);\r\n                    },\r\n                });\r\n                })\r\n                .catch((error) => {\r\n                Swal.fire({\r\n                    title: \"Oops...\",\r\n                    text: \"Something went wrong\",\r\n                    icon: \"error\",\r\n                    willClose: () => {\r\n                    window.location.reload(false);\r\n                    },\r\n                });\r\n            });\r\n        };\r\n\r\n        return (\r\n        <React.Fragment>\r\n        <Card className=\"custom-card\">\r\n            <Card.Header className=\"card-header-videogame\">Create new videogame</Card.Header>\r\n            <Card.Body className=\"card-body-videogame\">\r\n            <Formik\r\n                enableReinitialize\r\n                validationSchema={schema}\r\n                onSubmit={handleSubmit}\r\n                initialValues={{ \r\n                    title: this.state.videogame.title,\r\n                    installment: this.state.videogame.installment,\r\n                    status: this.state.videogame.status,\r\n                    personalStatus: this.state.videogame.personal_status,\r\n                    franchise: this.state.videogame.franchise,\r\n                    nextVideogame: this.state.videogame.next_videogame,\r\n                    platform: this.state.videogame.platform,\r\n                    additionalComments: this.state.videogame.additional_comments,\r\n                    image: \"\"\r\n                }}\r\n            >\r\n                {({ handleSubmit, handleChange, values, errors }) => (\r\n                <Form noValidate onSubmit={handleSubmit}>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-title\">\r\n                            <Form.Label className=\"label\">Title</Form.Label>\r\n                            <Form.Control\r\n                                name=\"title\"\r\n                                value={values.title}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.title}\r\n                                placeholder=\"Videogame's title\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.title}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-installment\">\r\n                            <Form.Label className=\"label\">Installment</Form.Label>\r\n                            <Form.Control\r\n                                name=\"installment\"\r\n                                value={values.installment}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.installment}\r\n                                type=\"number\"\r\n                                placeholder=\"0\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.installment}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-status\">\r\n                            <Form.Label className=\"label\">Status</Form.Label>\r\n                            <Form.Control\r\n                                name=\"status\"\r\n                                value={values.status}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.status}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select status</option>\r\n                                <option>Publishing</option>\r\n                                <option>Finished</option>\r\n                                <option>Cancelled</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.status}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-personalStatus\">\r\n                            <Form.Label className=\"label\">Personal status</Form.Label>\r\n                            <Form.Control\r\n                                name=\"personalStatus\"\r\n                                value={values.personalStatus}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.personalStatus}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select personal status</option>\r\n                                <option>Playing</option>\r\n                                <option>Completed</option>\r\n                                <option>Plan to Play</option>\r\n                                <option>Re-playing</option>\r\n                                <option>On Hold</option>\r\n                                <option>Dropped</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.personalStatus}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-franchise\">\r\n                            <Form.Label className=\"label\">Franchise</Form.Label>\r\n                            <Form.Control\r\n                                name=\"franchise\"\r\n                                value={values.franchise}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.franchise}\r\n                                placeholder=\"Franchise\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.franchise}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Group controlId=\"form-grid-nextVideogame\">\r\n                        <Form.Label className=\"label\">Next videogame</Form.Label>\r\n                        <Form.Control\r\n                            name=\"nextVideogame\"\r\n                            value={values.nextVideogame}\r\n                            onChange={handleChange}\r\n                            isInvalid={!!errors.nextVideogame}\r\n                            placeholder=\"Next videogame\"\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.nextVideogame}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"form-grid-platform\">\r\n                        <Form.Label className=\"label\">Platform</Form.Label>\r\n                        <Form.Control\r\n                            name=\"platform\"\r\n                            value={values.platform}\r\n                            onChange={handleChange}\r\n                            isInvalid={!!errors.platform}\r\n                            placeholder=\"Platform\"\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.platform}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"form-grid-additionalComments\">\r\n                        <Form.Label className=\"label\">Additional comments</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows=\"5\"\r\n                            name=\"additionalComments\"\r\n                            value={values.additionalComments}\r\n                            onChange={handleChange}\r\n                            isInvalid={!!errors.additionalComments}\r\n                            placeholder=\"Write any additional comments\"\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.additionalComments}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"form-grid-image\">\r\n                    <Form.File\r\n                        id=\"image\"\r\n                        name=\"image\"\r\n                        value={values.image}\r\n                        onChange={(event) => {\r\n                        handleChange(event);\r\n                        customChange(event);\r\n                        }}\r\n                        isInvalid={!!errors.image}\r\n                        label=\"Upload your cover image if you want to change it\"\r\n                        accept=\".jpg,.png\"\r\n                        custom\r\n                    />\r\n                    </Form.Group>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n            </Card.Body>\r\n        </Card>\r\n        </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VideogameFormEdit;","import React, { Component } from \"react\";\r\nimport VideogameFormEdit from \"../../components/Videogame/Forms/VideogameFormEdit\";\r\nimport NavBarGroup from \"../../components/NavBar/NavBarGroup\";\r\n\r\nclass VideogameInfoEdit extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <VideogameFormEdit videogame={this.props.match} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VideogameInfoEdit;","import React from \"react\";\r\nimport Home from \"./pages/Home\";\r\nimport FormAuthPage from \"./pages/FormAuthPage\";\r\nimport AnimePage from \"./pages/Anime/AnimePage\";\r\nimport AnimeForm from \"./components/Anime/Forms/AnimeForm\";\r\nimport MangaPage from \"./pages/Manga/MangaPage\";\r\nimport MangaForm from \"./components/Manga/Forms/MangaForm\";\r\nimport BookPage from \"./pages/Book/BookPage\";\r\nimport BookForm from \"./components/Book/Forms/BookForm\";\r\nimport MoviePage from \"./pages/Movie/MoviePage\";\r\nimport MovieForm from \"./components/Movie/Forms/MovieForm\";\r\nimport SeriesPage from \"./pages/Series/SeriesPage\";\r\nimport SeriesForm from \"./components/Series/Forms/SeriesForm\";\r\nimport VideogamePage from \"./pages/Videogame/VideogamePage\";\r\nimport VideogameForm from \"./components/Videogame/Forms/VideogameForm\";\r\nimport './App.css';\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport useToken from './useToken';\r\nimport AnimeInfo from \"./pages/Anime/AnimeInfo\";\r\nimport AnimeInfoEdit from \"./pages/Anime/AnimeInfoEdit\";\r\nimport MangaInfo from \"./pages/Manga/MangaInfo\";\r\nimport MangaInfoEdit from \"./pages/Manga/MangaInfoEdit\";\r\nimport BookInfo from \"./pages/Book/BookInfo\";\r\nimport BookInfoEdit from \"./pages/Book/BookInfoEdit\";\r\nimport MovieInfo from \"./pages/Movie/MovieInfo\";\r\nimport MovieInfoEdit from \"./pages/Movie/MovieInfoEdit\";\r\nimport SeriesInfo from \"./pages/Series/SeriesInfo\";\r\nimport SeriesInfoEdit from \"./pages/Series/SeriesInfoEdit\";\r\nimport VideogameInfo from \"./pages/Videogame/VideogameInfo\";\r\nimport VideogameInfoEdit from \"./pages/Videogame/VideogameInfoEdit\";\r\n\r\nfunction App() {\r\n  const { token } = useToken();\r\n\r\n  if(!token) {\r\n    return (\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/ListsWeb/\" component={Home}></Route>\r\n          <Route exact path=\"/ListsWeb/auth/\" component={FormAuthPage} ></Route>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route exact path=\"/ListsWeb/\" component={Home}></Route>\r\n        <Route exact path=\"/ListsWeb/anime/\" component={AnimePage}></Route>\r\n        <Route exact path=\"/ListsWeb/anime/add/\" component={AnimeForm}></Route>\r\n        <Route exact path=\"/ListsWeb/anime/info/:id/\" component={AnimeInfo}></Route>\r\n        <Route exact path=\"/ListsWeb/anime/info/edit/:id/\" component={AnimeInfoEdit}></Route>\r\n        <Route exact path=\"/ListsWeb/manga/\" component={MangaPage}></Route>\r\n        <Route exact path=\"/ListsWeb/manga/add/\" component={MangaForm}></Route>\r\n        <Route exact path=\"/ListsWeb/manga/info/:id/\" component={MangaInfo}></Route>\r\n        <Route exact path=\"/ListsWeb/manga/info/edit/:id/\" component={MangaInfoEdit}></Route>\r\n        <Route exact path=\"/ListsWeb/book/\" component={BookPage}></Route>\r\n        <Route exact path=\"/ListsWeb/book/add/\" component={BookForm}></Route>\r\n        <Route exact path=\"/ListsWeb/book/info/:id/\" component={BookInfo}></Route>\r\n        <Route exact path=\"/ListsWeb/book/info/edit/:id/\" component={BookInfoEdit}></Route>\r\n        <Route exact path=\"/ListsWeb/movie/\" component={MoviePage}></Route>\r\n        <Route exact path=\"/ListsWeb/movie/add/\" component={MovieForm}></Route>\r\n        <Route exact path=\"/ListsWeb/movie/info/:id/\" component={MovieInfo}></Route>\r\n        <Route exact path=\"/ListsWeb/movie/info/edit/:id/\" component={MovieInfoEdit}></Route>\r\n        <Route exact path=\"/ListsWeb/series/\" component={SeriesPage}></Route>\r\n        <Route exact path=\"/ListsWeb/series/add/\" component={SeriesForm}></Route>\r\n        <Route exact path=\"/ListsWeb/series/info/:id/\" component={SeriesInfo}></Route>\r\n        <Route exact path=\"/ListsWeb/series/info/edit/:id/\" component={SeriesInfoEdit}></Route>\r\n\r\n        <Route exact path=\"/ListsWeb/videogame/\" component={VideogamePage}></Route>\r\n        <Route exact path=\"/ListsWeb/videogame/add/\" component={VideogameForm}></Route>\r\n        <Route exact path=\"/ListsWeb/videogame/info/:id/\" component={VideogameInfo}></Route>\r\n        <Route exact path=\"/ListsWeb/videogame/info/edit/:id/\" component={VideogameInfoEdit}></Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n  <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}