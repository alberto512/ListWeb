{"version":3,"sources":["components/NavBar/NavBar.jsx","useToken.js","components/NavBar/NavBarGroup.jsx","pages/Home.jsx","components/SignUp/SignUp.jsx","components/Login/Login.jsx","pages/FormAuthPage.jsx","components/SearchBar/SearchBar.jsx","components/ItemDeck/ItemDeck.jsx","pages/AnimePage.jsx","components/AnimeForm/AnimeForm.jsx","components/AnimeInfoComponent/AnimeInfoComponent.jsx","pages/AnimeInfo.jsx","components/AnimeForm/AnimeFormEdit.jsx","pages/AnimeInfoEdit.jsx","App.js","reportWebVitals.js","index.js"],"names":["NavBar","React","forwardRef","props","ref","useState","display","setDisplay","useImperativeHandle","openNavBar","open","closeNavBar","close","ReactDOM","createPortal","className","onClick","children","document","getElementById","useToken","tokenString","localStorage","getItem","userToken","JSON","parse","getToken","token","setToken","setItem","stringify","NavBarGroup","navBarRef","useRef","current","Fragment","size","icon","exact","activeClassName","to","removeItem","window","location","href","Home","body","style","backgroundColor","Component","auth","formData","a","axios","post","then","response","data","catch","error","console","log","Signup","validated","setValidated","username","setUserName","password","setPassword","FormData","handleSubmit","e","preventDefault","currentTarget","checkValidity","stopPropagation","append","Swal","fire","title","text","willClose","reload","Form","noValidate","onSubmit","Group","controlId","Label","Control","required","type","placeholder","onChange","target","value","Button","variant","Login","form","non_field_errors","Text","url","includes","FormAuthPage","useEffect","Card","Header","Nav","fill","defaultActiveKey","Item","Link","Body","SearchBar","handleClick","autoComplete","id","this","Empty","counter","CheckCards","cont","c","Img","Title","ItemDeck","state","myArray","get","headers","auxArray","i","j","aux","push","arrayaux2","setState","prevProps","getDataCustom","$","hover","animate","marginTop","marginBottom","getData","map","index","CardDeck","auxstr","src","image","AnimePage","handleValue","val","AnimeForm","bsCustomFileInput","init","file","schema","Yup","oneOf","seasons","min","status","personalStatus","platform","optional","nextSeason","additionalComments","validationSchema","item","initialValues","handleChange","values","errors","Row","as","Col","name","isInvalid","Feedback","rows","File","event","files","customChange","label","accept","custom","AnimeInfoComponent","anime","handleDelete","delete","params","path","Grid","container","spacing","xs","Paper","personal_status","next_season","additional_comments","AnimeInfo","match","AnimeFormEdit","enableReinitialize","put","AnimeInfoEdit","App","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render"],"mappings":"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","file":"static/js/main.62ced0a6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst NavBar = React.forwardRef((props, ref) => {\r\n  const [display, setDisplay] = React.useState(false);\r\n\r\n  React.useImperativeHandle(ref, () => {\r\n    return {\r\n      openNavBar: () => open(),\r\n      closeNavBar: () => close(),\r\n    };\r\n  });\r\n\r\n  const open = () => {\r\n    setDisplay(true);\r\n  };\r\n\r\n  const close = () => {\r\n    setDisplay(false);\r\n  };\r\n\r\n  if (display) {\r\n    return ReactDOM.createPortal(\r\n      <div className={\"modal-wrapper\"}>\r\n        <div onClick={close} className={\"modal-backdrop\"} />\r\n        <div className={\"modal-box\"}>{props.children}</div>\r\n      </div>,\r\n      document.getElementById(\"root\")\r\n    );\r\n  }\r\n\r\n  return null;\r\n});\r\n\r\nexport default NavBar;","import { useState } from 'react';\r\n\r\nfunction useToken() {\r\n  const getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n  };\r\n\r\n  const [token, setToken] = useState(getToken());\r\n\r\n  const saveToken = userToken => {\r\n    localStorage.setItem('token', JSON.stringify(userToken));\r\n    setToken(userToken.token);\r\n  };\r\n\r\n  return {\r\n    setToken: saveToken,\r\n    token\r\n  }\r\n}\r\n\r\nexport default useToken;","import React from \"react\";\r\nimport NavBar from \"./NavBar\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { MDBIcon } from \"mdbreact\";\r\nimport useToken from '../../useToken';\r\nimport \"./NavBar.css\";\r\n\r\nfunction NavBarGroup() {\r\n  const navBarRef = React.useRef();\r\n\r\n  const openNavBar = () => {\r\n    navBarRef.current.openNavBar();\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    window.location.href = \"https://alberto512.github.io/ListsWeb/\"\r\n  }\r\n\r\n  const { token } = useToken();\r\n\r\n  if(!token) {\r\n    return (\r\n      <React.Fragment>\r\n        <MDBIcon size=\"2x\" className=\"icon\" onClick={openNavBar} icon=\"bars\" />\r\n  \r\n        <NavBar ref={navBarRef}>\r\n          <div className=\"div-nav-bar\">\r\n            <div className=\"div-nav-elements\">\r\n              <ul>\r\n                <li>\r\n                  <NavLink exact activeClassName=\"current\" to=\"/ListsWeb/\">\r\n                    Home\r\n                  </NavLink>\r\n                </li>\r\n                <li>\r\n                  <NavLink exact activeClassName=\"current\" to=\"/ListsWeb/auth\">\r\n                    Authenticate\r\n                  </NavLink>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </NavBar>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <MDBIcon size=\"2x\" className=\"icon\" onClick={openNavBar} icon=\"bars\" />\r\n\r\n      <NavBar ref={navBarRef}>\r\n        <div className=\"div-nav-bar\">\r\n          <div className=\"div-nav-elements\">\r\n            <ul>\r\n              <li>\r\n                <NavLink exact activeClassName=\"current\" to=\"/ListsWeb/\">\r\n                  Home\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink exact activeClassName=\"current\" to=\"/ListsWeb/anime/\">\r\n                  Anime\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink exact activeClassName=\"current\" to=\"/ListsWeb/\" onClick={logout}>\r\n                  Logout\r\n                </NavLink>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </NavBar>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default NavBarGroup;\r\n","import React, { Component } from \"react\";\r\nimport NavBarGroup from \"../components/NavBar/NavBarGroup\";\r\nimport \"./Home.css\";\r\n\r\nclass Home extends Component {\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#D2A5FF\"\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n          <div className=\"title\">\r\n            <h1 className=\"lists\">Lists Web</h1>\r\n          </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Home;","import React, { useState } from \"react\";\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\nimport \"./SignUp.css\";\r\n\r\nasync function auth(formData) {\r\n    return await axios.post(\r\n        \"https://lists-backend-web.herokuapp.com/api/signup/\",\r\n        formData\r\n    ).then(response => {\r\n        return response.data;\r\n    }).catch((error) => {\r\n        console.log(error);\r\n    });\r\n}\r\n\r\nconst Signup = ({ setToken }) => {\r\n    const [validated, setValidated] = useState(false);\r\n    const [username, setUserName] = useState();\r\n    const [password, setPassword] = useState();\r\n    const formData = new FormData();\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n        const form = e.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            e.stopPropagation();\r\n            return\r\n        }\r\n\r\n        setValidated(true);\r\n\r\n        formData.append(\"username\", username);\r\n        formData.append(\"password\", password);\r\n\r\n        const data = await auth(formData);\r\n\r\n        if (data?.token){\r\n            window.location.href = \"https://alberto512.github.io/ListsWeb/\"\r\n\r\n            setToken(data.token);\r\n        } else if(data?.username[0] === \"A user with that username already exists.\") {\r\n            Swal.fire({\r\n                title: \"Oops...\",\r\n                text: \"A user with that username already exists\",\r\n                icon: \"error\",\r\n                willClose: () => {\r\n                  window.location.reload(false);\r\n                },\r\n              });\r\n        } else {\r\n            Swal.fire({\r\n                title: \"Oops...\",\r\n                text: \"Something went wrong\",\r\n                icon: \"error\",\r\n                willClose: () => {\r\n                  window.location.reload(false);\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n            <Form.Group controlId=\"formUsername\">\r\n                <Form.Label>Username</Form.Label>\r\n                <Form.Control required type=\"text\" placeholder=\"Enter username\" onChange={e => setUserName(e.target.value)}/>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control required type=\"password\" placeholder=\"Password\" onChange={e => setPassword(e.target.value)}/>\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n                Sign Up\r\n            </Button>\r\n            </Form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Signup;","import React, { useState } from \"react\";\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./Login.css\";\r\n\r\nasync function auth(formData) {\r\n    return await axios.post(\r\n        \"https://lists-backend-web.herokuapp.com/api/login/\",\r\n        formData\r\n    ).then(response => {\r\n        return response.data;\r\n    }).catch((error) => {\r\n        console.log(error);\r\n    });\r\n}\r\n\r\nconst Login = ({ setToken }) => {\r\n    const [validated, setValidated] = useState(false);\r\n    const [username, setUserName] = useState();\r\n    const [password, setPassword] = useState();\r\n    const formData = new FormData();\r\n\r\n    const handleSubmit = async e => {\r\n        const form = e.currentTarget;\r\n        e.preventDefault();\r\n        if (form.checkValidity() === false) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        setValidated(true);\r\n\r\n        formData.append(\"username\", username);\r\n        formData.append(\"password\", password);\r\n\r\n        const data = await auth(formData);\r\n\r\n        if (data?.token){\r\n            window.location.href = \"https://alberto512.github.io/ListsWeb/\"\r\n\r\n            setToken(data.token);\r\n        } else if(data?.non_field_errors[0] === \"Unable to log in with provided credentials.\") {\r\n            Swal.fire({\r\n                title: \"Oops...\",\r\n                text: \"You have introduced wrong username or password\",\r\n                icon: \"error\",\r\n                willClose: () => {\r\n                  window.location.reload(false);\r\n                },\r\n              });\r\n        } else {\r\n            Swal.fire({\r\n                title: \"Oops...\",\r\n                text: \"Something went wrong\",\r\n                icon: \"error\",\r\n                willClose: () => {\r\n                  window.location.reload(false);\r\n                },\r\n            });\r\n        }\r\n    };\r\n  return (\r\n    <React.Fragment>\r\n        <br/>\r\n        <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"formUsername\">\r\n            <Form.Label>Username</Form.Label>\r\n            <Form.Control required type=\"text\" placeholder=\"Enter username\" onChange={e => setUserName(e.target.value)}/>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicPassword\">\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control required type=\"password\" placeholder=\"Password\" onChange={e => setPassword(e.target.value)}/>\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n            Log in\r\n        </Button>\r\n        </Form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nLogin.propTypes = {\r\n    setToken: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Login;","import React, { useEffect } from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\nimport Nav from 'react-bootstrap/Nav'   \r\nimport SignUp from '../components/SignUp/SignUp'\r\nimport Login from '../components/Login/Login'\r\nimport NavBarGroup from \"../components/NavBar/NavBarGroup\";\r\nimport useToken from '../useToken';\r\nimport \"./FormAuthPage.css\"\r\n\r\nfunction Text(props) {\r\n    const url = props.url;\r\n    if (url.includes(\"sign\")) {\r\n      return <SignUp setToken={props.setToken}/>;\r\n    }\r\n\r\n    return <Login setToken={props.setToken}/>;\r\n  }\r\n\r\nconst FormAuthPage = () => {\r\n  const { setToken } = useToken();\r\n  useEffect(() => {\r\n    document.body.style.backgroundColor = \"#D2A5FF\"\r\n  });\r\n  return (\r\n    <React.Fragment>\r\n      <NavBarGroup />\r\n      <div className=\"container\">\r\n        <Card>\r\n            <Card.Header>\r\n                <Nav fill className=\"justify-content-center\" variant=\"tabs\" defaultActiveKey=\"#login\">\r\n                    <Nav.Item>\r\n                        <Nav.Link href=\"#login\">Log in</Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link href=\"#sign\">Sign up</Nav.Link>\r\n                    </Nav.Item>\r\n                </Nav>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Text url={window.location.href} setToken={setToken} />\r\n            </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default FormAuthPage;","import React, { Component } from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends Component {\r\n  handleClick = (e) => {\r\n    e.preventDefault();\r\n    this.props.value(document.getElementById(\"input-bar\").value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container-search\">\r\n          <form autoComplete=\"off\">\r\n            <div className=\"tb\">\r\n              <div className=\"td\">\r\n                <input\r\n                  id=\"input-bar\"\r\n                  className=\"input-bar\"\r\n                  type=\"text\"\r\n                  placeholder=\"Search\"\r\n                  required\r\n                />\r\n              </div>\r\n              <div className=\"td\" id=\"cover\">\r\n                <button\r\n                  className=\"button-bar\"\r\n                  type=\"submit\"\r\n                  onClick={this.handleClick}\r\n                >\r\n                  <div className=\"circle\"></div>\r\n                  <span className=\"button-span\"></span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { CardDeck } from \"react-bootstrap\";\r\nimport $ from \"jquery\";\r\nimport axios from \"axios\";\r\nimport \"./ItemDeck.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst getToken = () => {\r\n  const tokenString = localStorage.getItem('token');\r\n  const userToken = JSON.parse(tokenString);\r\n  if (userToken) {\r\n    return userToken\r\n  } else {\r\n    return undefined\r\n  }\r\n};\r\n\r\nfunction Empty(props) {\r\n  const cont = props.counter;\r\n  if (cont === 0) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>No matching items</h1>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <p></p>;\r\n  }\r\n}\r\n\r\nfunction CheckCards(cont) {\r\n  let c = cont % 3;\r\n  if (c === 1) {\r\n    return (\r\n      <React.Fragment>\r\n        <Card className=\"item_card_hidden\">\r\n          <Card.Img variant=\"top\" />\r\n          <Card.Body>\r\n            <Card.Title></Card.Title>\r\n            <Card.Text></Card.Text>\r\n            <Button variant=\"primary\">View More</Button>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card className=\"item_card_hidden\">\r\n          <Card.Img variant=\"top\" />\r\n          <Card.Body>\r\n            <Card.Title></Card.Title>\r\n            <Card.Text></Card.Text>\r\n            <Button variant=\"primary\">View More</Button>\r\n          </Card.Body>\r\n        </Card>\r\n      </React.Fragment>\r\n    );\r\n  } else if (c === 2) {\r\n    return (\r\n      <Card className=\"item_card_hidden\">\r\n        <Card.Img variant=\"top\" />\r\n        <Card.Body>\r\n          <Card.Title></Card.Title>\r\n          <Card.Text></Card.Text>\r\n          <Button variant=\"primary\">View More</Button>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  } else {\r\n    return <p></p>;\r\n  }\r\n}\r\n\r\nclass ItemDeck extends Component {\r\n  state = {\r\n    myArray: [],\r\n  };\r\n\r\n  async getData(url) {\r\n\r\n    let arrayaux2 = await axios\r\n      .get(\"https://lists-backend-web.herokuapp.com/api/\"+ url + \"/\", {\r\n        headers: {\r\n          \"Authorization\": \"Token \" + getToken()\r\n        }\r\n      })\r\n      .then(function (response) {\r\n        let auxArray = [[]];\r\n        let i = 0;\r\n        let j = 0;\r\n        for (let aux in response.data) {\r\n          if (j === 3) {\r\n            j = 0;\r\n            i++;\r\n            auxArray[i] = [];\r\n          }\r\n          auxArray[i].push(response.data[aux]);\r\n          j++;\r\n        }\r\n        return auxArray;\r\n      });\r\n\r\n    this.setState({ myArray: arrayaux2 });\r\n  }\r\n\r\n  async getDataCustom(value, url) {\r\n    let arrayaux2 = await axios\r\n      .get(\"https://lists-backend-web.herokuapp.com/api/\" + url + \"/\", {\r\n        headers: {\r\n          \"Authorization\": \"Token \" + getToken()\r\n        }\r\n      })\r\n      .then(function (response) {\r\n        let auxArray = [[]];\r\n        let i = 0;\r\n        let j = 0;\r\n        for (let aux in response.data) {\r\n          if (j === 3) {\r\n            j = 0;\r\n            i++;\r\n            auxArray[i] = [];\r\n          }\r\n          if (response.data[aux].title.includes(value)) {\r\n            auxArray[i].push(response.data[aux]);\r\n            j++;\r\n          }\r\n        }\r\n        return auxArray;\r\n      });\r\n    this.setState({ myArray: arrayaux2 });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.value !== prevProps.value) {\r\n      this.getDataCustom(this.props.value, this.props.url);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    $(\".item_card\").hover(\r\n      function () {\r\n        $(this).animate(\r\n          {\r\n            marginTop: \"-=1%\",\r\n            marginBottom: \"1%\",\r\n          },\r\n          200\r\n        );\r\n      },\r\n\r\n      function () {\r\n        $(this).animate(\r\n          {\r\n            marginTop: \"0%\",\r\n            marginBottom: \"0%\",\r\n          },\r\n          200\r\n        );\r\n      }\r\n    );\r\n\r\n    this.getData(this.props.url);\r\n  }\r\n\r\n  render() {\r\n    let cont = 0;\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.myArray.map((value, index) => {\r\n          return (\r\n            <CardDeck className=\"deck\" key={index}>\r\n              {value.map((value, index) => {\r\n                cont++;\r\n                let auxstr = \"/ListsWeb/\" + this.props.url + \"/info/\" +  value.id;\r\n                return (\r\n                  <Card className=\"item_card\" key={index}>\r\n                    <Card.Img variant=\"top\" src={value.image} />\r\n                    <Card.Body className=\"item-card-body\">\r\n                      <Card.Title>{value.title}</Card.Title>\r\n                      <NavLink exact activeClassName=\"current\" to={auxstr}>\r\n                        <Button variant=\"primary\">View More</Button>\r\n                      </NavLink>\r\n                    </Card.Body>\r\n                  </Card>\r\n                );\r\n              })}\r\n              {CheckCards(cont)}\r\n            </CardDeck>\r\n          );\r\n        })}\r\n\r\n        <div className=\"wrap\">\r\n          <Empty counter={cont} />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ItemDeck;\r\n","import React, { Component } from \"react\";\r\nimport NavBarGroup from \"../components/NavBar/NavBarGroup\";\r\nimport SearchBar from \"../components/SearchBar/SearchBar\";\r\nimport ItemDeck from \"../components/ItemDeck/ItemDeck\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./AnimePage.css\";\r\n\r\nclass AnimePage extends Component {\r\n  state = {\r\n    value: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#1A43A9\"\r\n  }\r\n\r\n  handleValue = (val) => {\r\n    this.setState({ value: val });\r\n  };\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n          <NavBarGroup />\r\n          <SearchBar value={this.handleValue} />\r\n          <div className=\"item-deck\">\r\n            <ItemDeck className=\"deck\" value={this.state.value} url=\"anime\"/>\r\n          </div>\r\n          <Button className=\"button-anime\">\r\n            <NavLink exact className=\"nav\" to=\"/ListsWeb/anime/add\">\r\n              Add\r\n            </NavLink>\r\n          </Button>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default AnimePage;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport NavBarGroup from \"../NavBar/NavBarGroup\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./AnimeForm.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n  };\r\n\r\nclass AnimeForm extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#1A43A9\";\r\n    (function () {\r\n      bsCustomFileInput.init();\r\n    })();\r\n  }\r\n\r\n  render() {\r\n    const formData = new FormData();\r\n    let file;\r\n\r\n    const schema = Yup.object({\r\n        title: Yup.string().required(\"Write a title for the anime\"),\r\n        type: Yup.string().oneOf(\r\n            [\"Series\", \"Movie\", \"Special\", \"ONA\", \"OVA\"],\r\n            \"Select one type\"\r\n        )\r\n        .required(\"Select one type\"),\r\n        seasons: Yup.number().min(0).required(),\r\n        status: Yup.string().oneOf(\r\n            [\"Airing\", \"Finished\", \"Pending\", \"Cancelled\"],\r\n            \"Select the status\"\r\n        )\r\n        .required(\"Status of the anime\"),\r\n        personalStatus: Yup.string().oneOf(\r\n            [\"Watching\", \"Completed\", \"Plan to Watch\", \"Re-watching\", \"On Hold\", \"Dropped\"],\r\n            \"Select the personal status\"\r\n        )\r\n        .required(\"Personal status of the anime\"),\r\n        platform: Yup.string().optional(\"Platform where you can find the anime\"),\r\n        nextSeason: Yup.string().optional(\"Next season of the anime\"),\r\n        additionalComments: Yup.string().optional(\"Write some additional comments\"),\r\n        image: Yup.string().optional(),\r\n    });\r\n\r\n    const customChange = (event) => {\r\n      file = event.target.files[0];\r\n    };\r\n\r\n    const handleSubmit = (item) => {\r\n      formData.append(\"title\", item.title);\r\n      formData.append(\"type\", item.type);\r\n      formData.append(\"seasons\", item.seasons);\r\n      formData.append(\"status\", item.status);\r\n      formData.append(\"personal_status\", item.personalStatus);\r\n      formData.append(\"platform\", item.platform);\r\n      formData.append(\"next_season\", item.nextSeason);\r\n      formData.append(\"additional_comments\", item.additionalComments);\r\n      if (file) {\r\n        formData.append(\"image\", file, item.image);\r\n      }\r\n\r\n      axios\r\n        .post(\r\n          \"https://lists-backend-web.herokuapp.com/api/anime/\",formData, {\r\n              headers: {\r\n                \"Authorization\": \"Token \" + getToken()\r\n              }\r\n            }\r\n        )\r\n        .then(() => {\r\n          Swal.fire({\r\n            title: \"Good job!\",\r\n            text: \"Your anime has been submited\",\r\n            icon: \"success\",\r\n            willClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          Swal.fire({\r\n            title: \"Oops...\",\r\n            text: \"Something went wrong\",\r\n            icon: \"error\",\r\n            willClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        });\r\n    };\r\n\r\n    return (\r\n    <React.Fragment>\r\n      <NavBarGroup />\r\n      <Card className=\"custom-card\">\r\n        <Card.Header className=\"card-header-anime\">Create new anime</Card.Header>\r\n        <Card.Body className=\"card-body-anime\">\r\n          <Formik\r\n            validationSchema={schema}\r\n            onSubmit={handleSubmit}\r\n            initialValues={{ title: \"\", type: \"\", seasons: 0, status: \"\", personalStatus: \"\", platform: \"\", nextSeason: \"\", additionalComments: \"\", image: \"\" }}\r\n          >\r\n            {({ handleSubmit, handleChange, values, errors }) => (\r\n              <Form noValidate onSubmit={handleSubmit}>\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-title\">\r\n                    <Form.Label className=\"label\">Title</Form.Label>\r\n                    <Form.Control\r\n                      name=\"title\"\r\n                      value={values.title}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.title}\r\n                      placeholder=\"Anime's title\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.title}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-type\">\r\n                    <Form.Label className=\"label\">Type</Form.Label>\r\n                    <Form.Control\r\n                      name=\"type\"\r\n                      value={values.type}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.type}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select type</option>\r\n                      <option>Series</option>\r\n                      <option>Movie</option>\r\n                      <option>Special</option>\r\n                      <option>ONA</option>\r\n                      <option>OVA</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.type}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-seasons\">\r\n                    <Form.Label className=\"label\">Seasons</Form.Label>\r\n                    <Form.Control\r\n                      name=\"seasons\"\r\n                      value={values.seasons}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.seasons}\r\n                      type=\"number\"\r\n                      placeholder=\"0\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.seasons}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-status\">\r\n                    <Form.Label className=\"label\">Status</Form.Label>\r\n                    <Form.Control\r\n                      name=\"status\"\r\n                      value={values.status}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.status}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select status</option>\r\n                      <option>Airing</option>\r\n                      <option>Finished</option>\r\n                      <option>Pending</option>\r\n                      <option>Cancelled</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.status}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-personalStatus\">\r\n                    <Form.Label className=\"label\">Personal status</Form.Label>\r\n                    <Form.Control\r\n                      name=\"personalStatus\"\r\n                      value={values.personalStatus}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.personalStatus}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select personal status</option>\r\n                      <option>Watching</option>\r\n                      <option>Completed</option>\r\n                      <option>Plan to Watch</option>\r\n                      <option>Re-watching</option>\r\n                      <option>On Hold</option>\r\n                      <option>Dropped</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.personalStatus}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-platform\">\r\n                    <Form.Label className=\"label\">Platform</Form.Label>\r\n                    <Form.Control\r\n                      name=\"platform\"\r\n                      value={values.platform}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.platform}\r\n                      placeholder=\"Platform\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.platform}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Group as={Col} controlId=\"form-grid-nextSeason\">\r\n                    <Form.Label className=\"label\">Next season</Form.Label>\r\n                    <Form.Control\r\n                      name=\"nextSeason\"\r\n                      value={values.nextSeason}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.nextSeason}\r\n                      placeholder=\"Next season\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.nextSeason}\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"form-grid-additionalComments\">\r\n                  <Form.Label className=\"label\">Additional comments</Form.Label>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    rows=\"5\"\r\n                    name=\"additionalComments\"\r\n                    value={values.additionalComments}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.additionalComments}\r\n                    placeholder=\"Write any additional comments\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.additionalComments}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"form-grid-image\">\r\n                  <Form.File\r\n                    id=\"image\"\r\n                    name=\"image\"\r\n                    value={values.image}\r\n                    onChange={(event) => {\r\n                      handleChange(event);\r\n                      customChange(event);\r\n                    }}\r\n                    isInvalid={!!errors.image}\r\n                    label=\"Upload your cover image\"\r\n                    accept=\".jpg,.png\"\r\n                    custom\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Button\r\n                  variant=\"warning\"\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Card.Body>\r\n      </Card>\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnimeForm;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./AnimeInfoComponent.css\";\r\nimport Button from 'react-bootstrap/Button'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n};\r\n\r\nclass AnimeInfoComponent extends Component {\r\n  state = {\r\n    anime: [],\r\n  };\r\n\r\n  async getData() {\r\n    let data = await axios\r\n      .get(\r\n        \"https://lists-backend-web.herokuapp.com/api/anime/\" +\r\n          this.props.anime.params.id, {\r\n            headers: {\r\n                \"Authorization\": \"Token \" + getToken()\r\n            }\r\n          }\r\n      )\r\n      .then(function (response) {\r\n        return response.data;\r\n      });\r\n\r\n    this.setState({ anime: data });\r\n  }\r\n\r\n  handleDelete = (e) => {\r\n    axios.delete(\"https://lists-backend-web.herokuapp.com/api/anime/\" + this.state.anime.id + \"/\", {\r\n        headers: {\r\n          \"Authorization\": \"Token \" + getToken()\r\n        }\r\n      }\r\n    ).then(\r\n      function () {\r\n        window.location.href = \"https://alberto512.github.io/ListsWeb/anime/\"\r\n      }\r\n    )\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = \"#1A43A9\"\r\n    this.getData();\r\n  }\r\n\r\n  render() {\r\n    let path = \"/ListsWeb/anime/info/edit/\" +  this.state.anime.id;\r\n    return (\r\n      <React.Fragment>\r\n        <Grid container spacing={6}>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-paper\">TITLE<br />{this.state.anime.title}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-paper\">TYPE<br />{this.state.anime.type}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-paper\">SEASONS<br />{this.state.anime.seasons}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-paper\">STATUS<br />{this.state.anime.status}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-paper\">PERSONAL STATUS<br />{this.state.anime.personal_status}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-paper\">PLATFORM<br />{this.state.anime.platform}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className=\"display-item-paper\">NEXT SEASON<br />{this.state.anime.next_season}</Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Paper className=\"display-item-paper\">ADDITIONAL COMMENTS<br />{this.state.anime.additional_comments}</Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <NavLink exact activeClassName=\"current\" to={path}>\r\n                <Button className=\"button-edit\">Edit</Button>\r\n              </NavLink>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Button className=\"button-delete\" onClick={this.handleDelete}>Delete</Button>\r\n            </Grid>\r\n      </Grid>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnimeInfoComponent;","import React, { Component } from \"react\";\r\nimport AnimeInfoComponent from \"../components/AnimeInfoComponent/AnimeInfoComponent\";\r\nimport NavBarGroup from \"../components/NavBar/NavBarGroup\";\r\n\r\nclass AnimeInfo extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <AnimeInfoComponent anime={this.props.match} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnimeInfo;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./AnimeFormEdit.css\";\r\n\r\nconst getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    if (userToken) {\r\n      return userToken\r\n    } else {\r\n      return undefined\r\n    }\r\n  };\r\n\r\nclass AnimeFormEdit extends Component {\r\n    state = {\r\n        anime: {\r\n            title: \"\",\r\n            type: \"\",\r\n            seasons: 0,\r\n            status: \"\",\r\n            personal_status: \"\",\r\n            platform: \"\",\r\n            next_season: \"\",\r\n            additional_comments: \"\",\r\n            image: \"\"\r\n        },\r\n    };\r\n\r\n    async getData() {\r\n        let data = await axios\r\n          .get(\r\n            \"https://lists-backend-web.herokuapp.com/api/anime/\" +\r\n              this.props.anime.params.id, {\r\n                headers: {\r\n                    \"Authorization\": \"Token \" + getToken()\r\n                }\r\n              }\r\n          )\r\n          .then(function (response) {\r\n            return response.data;\r\n          });\r\n    \r\n        if (!data.additional_comments){\r\n            data.additional_comments = \"\"\r\n        }\r\n        this.setState({ anime: data });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.body.style.backgroundColor = \"#1A43A9\";\r\n        (function () {\r\n        bsCustomFileInput.init();\r\n        })();\r\n        this.getData();\r\n    }\r\n\r\n    render() {\r\n        const formData = new FormData();\r\n        let file;\r\n\r\n        const schema = Yup.object({\r\n            title: Yup.string().optional(\"Write a title for the anime\"),\r\n            type: Yup.string().oneOf(\r\n                [\"Series\", \"Movie\", \"Special\", \"ONA\", \"OVA\"],\r\n                \"Select one type\"\r\n            )\r\n            .optional(\"Select one type\"),\r\n            seasons: Yup.number().min(0).optional(),\r\n            status: Yup.string().oneOf(\r\n                [\"Airing\", \"Finished\", \"Pending\", \"Cancelled\"],\r\n                \"Select the status\"\r\n            )\r\n            .optional(\"Status of the anime\"),\r\n            personalStatus: Yup.string().oneOf(\r\n                [\"Watching\", \"Completed\", \"Plan to Watch\", \"Re-watching\", \"On Hold\", \"Dropped\"],\r\n                \"Select the personal status\"\r\n            )\r\n            .optional(\"Personal status of the anime\"),\r\n            platform: Yup.string().optional(\"Platform where you can find the anime\"),\r\n            nextSeason: Yup.string().optional(\"Next season of the anime\"),\r\n            additionalComments: Yup.string().optional(\"Write some additional comments\"),\r\n            image: Yup.string().optional(),\r\n        });\r\n\r\n        const customChange = (event) => {\r\n            file = event.target.files[0];\r\n        };\r\n\r\n        const handleSubmit = (item) => {\r\n            if (item.title !== this.state.anime.title) {\r\n                formData.append(\"title\", item.title);\r\n            }\r\n            if (item.type !== this.state.anime.type) {\r\n                formData.append(\"type\", item.type);\r\n            }\r\n            if (item.seasons !== this.state.anime.seasons) {\r\n                formData.append(\"seasons\", item.seasons);\r\n            }\r\n            if (item.status !== this.state.anime.status) {\r\n                formData.append(\"status\", item.status);\r\n            }\r\n            if (item.personalStatus !== this.state.anime.personal_status) {\r\n                formData.append(\"personal_status\", item.personalStatus);\r\n            }\r\n            if (item.platform !== this.state.anime.platform) {\r\n                formData.append(\"platform\", item.platform);\r\n            }\r\n            if (item.nextSeason !== this.state.anime.next_season) {\r\n                formData.append(\"next_season\", item.nextSeason);\r\n            }\r\n            if (item.additionalComments !== this.state.anime.additional_comments) {\r\n                formData.append(\"additional_comments\", item.additionalComments);\r\n            }\r\n            if (file) {\r\n                formData.append(\"image\", file, item.image);\r\n            }\r\n\r\n            axios.put(\r\n                \"https://lists-backend-web.herokuapp.com/api/anime/\" + this.state.anime.id + \"/\", formData, {\r\n                    headers: {\r\n                        \"Authorization\": \"Token \" + getToken()\r\n                    }\r\n                })\r\n                .then(() => {\r\n                Swal.fire({\r\n                    title: \"Good job!\",\r\n                    text: \"Your anime has been submited\",\r\n                    icon: \"success\",\r\n                    willClose: () => {\r\n                    window.location.reload(false);\r\n                    },\r\n                });\r\n                })\r\n                .catch((error) => {\r\n                Swal.fire({\r\n                    title: \"Oops...\",\r\n                    text: \"Something went wrong\",\r\n                    icon: \"error\",\r\n                    willClose: () => {\r\n                    window.location.reload(false);\r\n                    },\r\n                });\r\n            });\r\n        };\r\n\r\n        return (\r\n        <React.Fragment>\r\n        <Card className=\"custom-card\">\r\n            <Card.Header className=\"card-header-anime\">Create new anime</Card.Header>\r\n            <Card.Body className=\"card-body-anime\">\r\n            <Formik\r\n                enableReinitialize\r\n                validationSchema={schema}\r\n                onSubmit={handleSubmit}\r\n                initialValues={{ \r\n                    title: this.state.anime.title,\r\n                    type: this.state.anime.type,\r\n                    seasons: this.state.anime.seasons,\r\n                    status: this.state.anime.status,\r\n                    personalStatus: this.state.anime.personal_status,\r\n                    platform: this.state.anime.platform,\r\n                    nextSeason: this.state.anime.next_season,\r\n                    additionalComments: this.state.anime.additional_comments,\r\n                    image: \"\"\r\n                }}\r\n            >\r\n                {({ handleSubmit, handleChange, values, errors }) => (\r\n                <Form noValidate onSubmit={handleSubmit}>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-title\">\r\n                            <Form.Label className=\"label\">Title</Form.Label>\r\n                            <Form.Control\r\n                                name=\"title\"\r\n                                value={values.title}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.title}\r\n                                placeholder=\"Anime's title\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.title}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-type\">\r\n                            <Form.Label className=\"label\">Type</Form.Label>\r\n                            <Form.Control\r\n                                name=\"type\"\r\n                                value={values.type}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.type}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select type</option>\r\n                                <option>Series</option>\r\n                                <option>Movie</option>\r\n                                <option>Special</option>\r\n                                <option>ONA</option>\r\n                                <option>OVA</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.type}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-seasons\">\r\n                            <Form.Label className=\"label\">Seasons</Form.Label>\r\n                            <Form.Control\r\n                                name=\"seasons\"\r\n                                value={values.seasons}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.seasons}\r\n                                type=\"number\"\r\n                                placeholder=\"0\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.seasons}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-status\">\r\n                            <Form.Label className=\"label\">Status</Form.Label>\r\n                            <Form.Control\r\n                                name=\"status\"\r\n                                value={values.status}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.status}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select status</option>\r\n                                <option>Airing</option>\r\n                                <option>Finished</option>\r\n                                <option>Pending</option>\r\n                                <option>Cancelled</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.status}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"form-grid-personalStatus\">\r\n                            <Form.Label className=\"label\">Personal status</Form.Label>\r\n                            <Form.Control\r\n                                name=\"personalStatus\"\r\n                                value={values.personalStatus}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.personalStatus}\r\n                                as=\"select\"\r\n                            >\r\n                                <option>Select personal status</option>\r\n                                <option>Watching</option>\r\n                                <option>Completed</option>\r\n                                <option>Plan to Watch</option>\r\n                                <option>Re-watching</option>\r\n                                <option>On Hold</option>\r\n                                <option>Dropped</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.personalStatus}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"form-grid-platform\">\r\n                            <Form.Label className=\"label\">Platform</Form.Label>\r\n                            <Form.Control\r\n                                name=\"platform\"\r\n                                value={values.platform}\r\n                                onChange={handleChange}\r\n                                isInvalid={!!errors.platform}\r\n                                placeholder=\"Platform\"\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.platform}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Group as={Col} controlId=\"form-grid-nextSeason\">\r\n                        <Form.Label className=\"label\">Next season</Form.Label>\r\n                        <Form.Control\r\n                            name=\"nextSeason\"\r\n                            value={values.nextSeason}\r\n                            onChange={handleChange}\r\n                            isInvalid={!!errors.nextSeason}\r\n                            placeholder=\"Next season\"\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.nextSeason}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"form-grid-additionalComments\">\r\n                        <Form.Label className=\"label\">Additional comments</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows=\"5\"\r\n                            name=\"additionalComments\"\r\n                            value={values.additionalComments}\r\n                            onChange={handleChange}\r\n                            isInvalid={!!errors.additionalComments}\r\n                            placeholder=\"Write any additional comments\"\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            {errors.additionalComments}\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"form-grid-image\">\r\n                    <Form.File\r\n                        id=\"image\"\r\n                        name=\"image\"\r\n                        value={values.image}\r\n                        onChange={(event) => {\r\n                        handleChange(event);\r\n                        customChange(event);\r\n                        }}\r\n                        isInvalid={!!errors.image}\r\n                        label=\"Upload your cover image if you want to change it\"\r\n                        accept=\".jpg,.png\"\r\n                        custom\r\n                    />\r\n                    </Form.Group>\r\n\r\n                    <Button\r\n                        variant=\"warning\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n            </Card.Body>\r\n        </Card>\r\n        </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AnimeFormEdit;","import React, { Component } from \"react\";\r\nimport AnimeFormEdit from \"../components/AnimeForm/AnimeFormEdit\";\r\nimport NavBarGroup from \"../components/NavBar/NavBarGroup\";\r\n\r\nclass AnimeInfoEdit extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <AnimeFormEdit anime={this.props.match} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnimeInfoEdit;","import React from \"react\";\r\nimport Home from \"./pages/Home\";\r\nimport FormAuthPage from \"./pages/FormAuthPage\";\r\nimport AnimePage from \"./pages/AnimePage\"\r\nimport AnimeForm from \"./components/AnimeForm/AnimeForm\"\r\nimport './App.css';\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport useToken from './useToken';\r\nimport AnimeInfo from \"./pages/AnimeInfo\"\r\nimport AnimeInfoEdit from \"./pages/AnimeInfoEdit\"\r\n\r\nfunction App() {\r\n  const { token } = useToken();\r\n\r\n  if(!token) {\r\n    return (\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/ListsWeb/\" component={Home}></Route>\r\n          <Route exact path=\"/ListsWeb/auth/\" component={FormAuthPage} ></Route>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route exact path=\"/ListsWeb/\" component={Home}></Route>\r\n        <Route exact path=\"/ListsWeb/anime/\" component={AnimePage}></Route>\r\n        <Route exact path=\"/ListsWeb/anime/add/\" component={AnimeForm}></Route>\r\n        <Route exact path=\"/ListsWeb/anime/info/:id/\" component={AnimeInfo}></Route>\r\n        <Route exact path=\"/ListsWeb/anime/info/edit/:id/\" component={AnimeInfoEdit}></Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n  <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}